[{"id":"c956f6e4.937a7","type":"tab","label":"Flow 1","disabled":false,"info":""},{"id":"1af44e44.e1caea","type":"subflow","name":"Calculate Average Temp","info":"","category":"","in":[{"x":80,"y":80,"wires":[{"id":"74bc9226.3ff724"}]}],"out":[{"x":460,"y":80,"wires":[{"id":"74bc9226.3ff724","port":0}]}],"env":[],"meta":{},"color":"#DDAA99"},{"id":"83365ccb.559558","type":"subflow","name":"Upstairs sensor readings","info":"","category":"","in":[{"x":60,"y":160,"wires":[{"id":"6f9fb26e.f5b454"}]}],"out":[],"env":[],"meta":{},"color":"#DDAA99"},{"id":"65ad7d23.70a2bc","type":"subflow","name":"Main floor sensor readings","info":"","category":"","in":[{"x":60,"y":160,"wires":[{"id":"d413a1b7.8f6e8"}]}],"out":[],"env":[],"meta":{},"color":"#DDAA99"},{"id":"f1b7c374.6327f","type":"subflow","name":"Basement sensor readings","info":"","category":"","in":[{"x":60,"y":160,"wires":[{"id":"e566abe8.54bd5"}]}],"out":[],"env":[],"meta":{},"color":"#DDAA99"},{"id":"9f9a87f3.ed673","type":"subflow","name":"Temp text generation","info":"","category":"","in":[{"x":80,"y":40,"wires":[{"id":"26b8af21.ad43d8"}]}],"out":[{"x":400,"y":40,"wires":[{"id":"26b8af21.ad43d8","port":0}]}],"env":[],"meta":{},"color":"#DDAA99"},{"id":"8ddbcca0.232738","type":"subflow","name":"Temp override enable","info":"","category":"","in":[{"x":80,"y":40,"wires":[{"id":"f3dacb6c.2ec2e8"}]}],"out":[{"x":400,"y":40,"wires":[{"id":"f3dacb6c.2ec2e8","port":0}]}],"env":[],"meta":{},"color":"#DDAA99"},{"id":"8953881b.c1486","type":"subflow","name":"Store temp setpoint","info":"","category":"","in":[{"x":80,"y":40,"wires":[{"id":"26836b6.75ea714"}]}],"out":[{"x":400,"y":40,"wires":[{"id":"26836b6.75ea714","port":0}]}],"env":[],"meta":{},"color":"#DDAA99"},{"id":"ec5047e5.1fe1d","type":"subflow","name":"Temp UI set","info":"","category":"","in":[{"x":80,"y":80,"wires":[{"id":"d3c1f5b9.e5a3e"}]}],"out":[{"x":340,"y":20,"wires":[{"id":"d3c1f5b9.e5a3e","port":0}]},{"x":340,"y":80,"wires":[{"id":"d3c1f5b9.e5a3e","port":1}]},{"x":340,"y":140,"wires":[{"id":"d3c1f5b9.e5a3e","port":2}]}],"env":[],"meta":{},"color":"#DDAA99"},{"id":"135e86d8.5c99a1","type":"subflow","name":"Want to GPIO mapper","info":"","category":"","in":[{"x":80,"y":100,"wires":[{"id":"eab09f69.dd877"}]}],"out":[{"x":540,"y":40,"wires":[{"id":"eab09f69.dd877","port":0}]},{"x":540,"y":100,"wires":[{"id":"eab09f69.dd877","port":1}]},{"x":540,"y":160,"wires":[{"id":"eab09f69.dd877","port":2}]}],"env":[],"meta":{},"color":"#DDAA99"},{"id":"8c7b36e3.309c68","type":"subflow","name":"Fan enable","info":"","category":"","in":[{"x":40,"y":40,"wires":[{"id":"6e41f916.df7f68"}]}],"out":[{"x":300,"y":40,"wires":[{"id":"6e41f916.df7f68","port":0}]}],"env":[],"meta":{},"color":"#DDAA99"},{"id":"a9211c68.6381c","type":"subflow","name":"Fan text generation","info":"","category":"","in":[{"x":40,"y":40,"wires":[{"id":"6b4b7bb0.25e5f4"}]}],"out":[{"x":360,"y":40,"wires":[{"id":"6b4b7bb0.25e5f4","port":0}]}],"env":[],"meta":{},"color":"#DDAA99"},{"id":"4cf002bb.ebebb4","type":"group","z":"c956f6e4.937a7","name":"Load data from file and generate messages to set gauges. Also, send initial email.","style":{"label":true},"nodes":["3c4de12c.0ed246","bb5b866f.7ab148","7927dab2.9fe2c4","6701ed7d012f9563","8959b7ef1de4fba1"],"x":14,"y":19,"w":812,"h":162},{"id":"6f07d525.5ab154","type":"group","z":"c956f6e4.937a7","name":"Handle CoAP temp input","style":{"label":true},"nodes":["c20d5ce4.b35a2","805ee380.6c968","13c36e92.2d51e9","e21f1be182c2bf3b","8e37f58cae8182c8","dc8b891a7684a3f1","a4afde8d79d0a552","56fd67d4aa796664","e153edabf46cde39"],"x":14,"y":539,"w":972,"h":222},{"id":"40441e05.580d08","type":"group","z":"c956f6e4.937a7","name":"Average temperature logic and UI elements","style":{"label":true},"nodes":["53b4e133.9b68e","ee3cfe46.b4e0a8","85bd42f1.5e33b","49cdecea.aa7f44","217babd9.8c62c4","88c52bc9.8c7ba8","1df8ebc4.22f2bc","9a8dfae0.428bd8","88d470eb.f9de9"],"x":434,"y":819,"w":712,"h":162},{"id":"9d1fcef.684b7b","type":"group","z":"c956f6e4.937a7","name":"Missing sensor logic","style":{"label":true},"nodes":["80d40d8b.e533c8","15f10963.e52dc7","31e4e46b.aec78c","9b1b4114.9ab368"],"x":14,"y":1399,"w":912,"h":122},{"id":"c70645bc.12b098","type":"group","z":"c956f6e4.937a7","name":"Zero out dead sensors","style":{"label":true},"nodes":["2e9f7768.ef571","f95fa61b.8b47d"],"x":14,"y":199,"w":652,"h":82},{"id":"bf1e0396.a5cbf","type":"group","z":"c956f6e4.937a7","name":"Persist data to file","style":{"label":true},"nodes":["fb33fae7.41b9f","f87d2ec7.593458","75a98779.33d778","336b64d5.bad99c","6c1fea2d.f8be04","bd74f35a.0e0ae","2e3f4cc7.82c584","230d11498551f7dc","d092c9c3f66239e7"],"x":14,"y":999,"w":832,"h":202},{"id":"115c57c2.c40e3","type":"group","z":"c956f6e4.937a7","name":"Load data from files","style":{"label":true},"nodes":["4b2dcdc1.388be4","a18ea1f0.c2b33","63851ce2.7bd70c","4bb592c9.eb816c","cf22f8fe.1de7f8","5ad4dabedcf4ba84","20d9f0928fc60d40"],"x":14,"y":1219,"w":992,"h":162},{"id":"d2f05012.6300e8","type":"group","z":"c956f6e4.937a7","name":"Control logic","style":{"label":true},"nodes":["70540f4d.5ab51","d52206bc.640af","1e8eb4b8.c906fb","a30c441d.604788","f3bf24a0.d82f58","f00e3052.76121","e8c2fbbb.9a84e","89e3670e.0f9808","4f4c1bc5.828434","9147075c.d910d8","e2fbe071.c4836","8dfd4695.ef4ec","2020ef06.213308","abe124e7.a1159","87b1c475.6bec68","3db5b02.70d71d","fc2f9098.6a1dc8","43eeb6fc.92a1b8","fb0ab8d.f89b448","36e0ed6b.68d4da","3cba66b6.9dc33a","3218709b.b74dd","68fd81b4.0b2e2","523f61bb.ed838","f411c7c.342e1b8","27220f7e.7b9fb8","a3748100.4d29b8","80ba6cb2.201698","83a7f83b.7e73b8"],"x":14,"y":2339,"w":1392,"h":562},{"id":"5d7cceac.346c48","type":"group","z":"c956f6e4.937a7","name":"Control charting","style":{"label":true},"nodes":["1089ff6e.f1f6b9","36960c72.018944","38cf3fd.01878c","fcfebe86.c063f8","3af3354e.876b22","84c40a7a.7a96b8"],"x":1474,"y":2019,"w":592,"h":562},{"id":"806a61f0.233fe8","type":"group","z":"c956f6e4.937a7","name":"Local temp read and store","style":{"label":true},"nodes":["2bd53f4.9cdcac","f277df24.a247d","c65e1760.9fcb08","88cc8dec.d06b98","d5d17202.e64bd8","f100e952.e3311"],"x":14,"y":319,"w":1232,"h":149.5},{"id":"1fa2872e.1bad99","type":"group","z":"c956f6e4.937a7","name":"Sensor UI elements","style":{"label":true},"nodes":["a69b4e2b.ceecd8","1a6e305.5f2785","d9cb9b2b.9129c","621ca232.da3ffc","42f3e1a6.aef098","ade60ea4.bf4fb8","39a68f99.30fa78","0d3dbb7b47322fc0"],"x":854,"y":19,"w":612,"h":282},{"id":"e0c033c.0d2b4d","type":"group","z":"c956f6e4.937a7","name":"Overrides","style":{"label":true},"nodes":["ba3f4e3b.614968","a504825a.7a9f38","1f7817a1.bdbfa","ff4e229e.bc832","c78e8fbc.a8d4c8","95588cef.ab4c6","a21621c4.2e9648","cf15512a.fa0dd","103585dc.c53ad2","ebfec5be.446cc","6f458509.0f286c","373ee7ea.5da728","a9732bd9.a28f2","b1cdf0c8.de86d8","f5ec44eb.fcbcf","defacd35.886a18","488a08a1.06b218","4b8d813.4e865","b9748175.497f8","bc8fcb69.27d2f","b2fa7655.668148","5fd32387.e9d32c","5f6d1b3c.31206c","f49a56e2.646b4","7e2d98f1.8a492","ac2fe258.125e3","cde3d281.f7ea18","9dc7864c.f2a288","6bb41edf.6709c","838b4d2.590023","9e1f60eb.74db08","ecaf1da2.277c18","467fb4c1.d5027c","47cfe70b.a0faa8","c45d7357.ce6328","83f721db.9c53b","d76acf7e.43ad4","646d0fda.b1ce58","5b32b88d.6a02a","e7aed0e6.1bb228","5a26f618.b7dc6","c1bc4ca4.953968","f3d93cb1.67bcf","e7c8d11e.8368b","cb439109.4fca2","50c741b691c09e3c","79d40c87e6abe7a8","a514f3570ea7aeac"],"x":14,"y":1531.5,"w":1432,"h":729.5},{"id":"d34ef8a2ae06d8e5","type":"group","z":"c956f6e4.937a7","name":"Statistics graphing","style":{"label":true},"nodes":["48cd9e2e50b3b0f8","f80432d4d554e262","d25c3cff6b4ce514","c383aba966f59c4f"],"x":14,"y":2919,"w":872,"h":122},{"id":"98e04114.3cbab","type":"ui_base","theme":{"name":"theme-dark","lightTheme":{"default":"#0094CE","baseColor":"#0094CE","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":true,"reset":false},"darkTheme":{"default":"#097479","baseColor":"#097479","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":true,"reset":false},"customTheme":{"name":"Untitled Theme 1","default":"#4B7930","baseColor":"#4B7930","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"},"themeState":{"base-color":{"default":"#097479","value":"#097479","edited":false},"page-titlebar-backgroundColor":{"value":"#097479","edited":false},"page-backgroundColor":{"value":"#111111","edited":false},"page-sidebar-backgroundColor":{"value":"#333333","edited":false},"group-textColor":{"value":"#0eb8c0","edited":false},"group-borderColor":{"value":"#555555","edited":false},"group-backgroundColor":{"value":"#333333","edited":false},"widget-textColor":{"value":"#eeeeee","edited":false},"widget-backgroundColor":{"value":"#097479","edited":false},"widget-borderColor":{"value":"#333333","edited":false},"base-font":{"value":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"}},"angularTheme":{"primary":"indigo","accents":"blue","warn":"red","background":"grey","palette":"light"}},"site":{"name":"Node-RED Dashboard","hideToolbar":"false","allowSwipe":"false","lockMenu":"false","allowTempTheme":"true","dateFormat":"DD/MM/YYYY","sizes":{"sx":48,"sy":48,"gx":6,"gy":6,"cx":6,"cy":6,"px":0,"py":0}}},{"id":"958f0785.fb357","type":"ui_tab","name":"Control","icon":"dashboard","order":1,"disabled":false,"hidden":false},{"id":"7a8578cd.e0755","type":"config-log","logname":"Standard log config","logdir":"/home/matt/logs","stamp":"local","logstyle":"plain","logrotate":true,"logcompress":true,"logrotatecount":"5","logsize":"1000"},{"id":"408c1eba.a9c6a8","type":"ui_group","name":"Runtimes","tab":"958f0785.fb357","order":5,"disp":true,"width":"6","collapse":false,"className":""},{"id":"32c00698.3ab3ca","type":"ui_tab","name":"Individual Sensors","icon":"dashboard","order":3,"disabled":false,"hidden":false},{"id":"600f61c0.fbebb8","type":"ui_group","name":"Upstairs","tab":"32c00698.3ab3ca","order":1,"disp":true,"width":"6","collapse":false,"className":""},{"id":"2c421088.8015b","type":"ui_group","name":"Main Floor","tab":"958f0785.fb357","order":2,"disp":true,"width":"6","collapse":false,"className":""},{"id":"b88f3265.acdf3","type":"ui_group","name":"Basement","tab":"958f0785.fb357","order":3,"disp":true,"width":"6","collapse":false,"className":""},{"id":"89166592.5b7728","type":"ui_group","name":"Main Floor","tab":"32c00698.3ab3ca","order":2,"disp":true,"width":"6","collapse":false,"className":""},{"id":"524013df.74cabc","type":"ui_group","name":"Basement","tab":"32c00698.3ab3ca","order":3,"disp":true,"width":"6","collapse":false,"className":""},{"id":"a7684798.a5ef","type":"ui_group","name":"Special Modes","tab":"958f0785.fb357","order":4,"disp":true,"width":"6","collapse":false,"className":""},{"id":"e704afab.5ac708","type":"ui_tab","name":"History","icon":"dashboard","order":3,"disabled":false,"hidden":false},{"id":"46a15056.f27fe","type":"ui_group","name":"Temperatures","tab":"e704afab.5ac708","order":1,"disp":true,"width":"6","collapse":false,"className":""},{"id":"7f95db1d.7d6e5c","type":"ui_group","name":"Control","tab":"e704afab.5ac708","order":2,"disp":true,"width":"6","collapse":false,"className":""},{"id":"b0eb88d49e33818f","type":"coap-server","name":"Local CoAP server","port":"5683","ipv6":false},{"id":"33581fd97c491de8","type":"ui_group","name":"Upstairs","tab":"958f0785.fb357","order":1,"disp":true,"width":"6","collapse":false,"className":""},{"id":"74bc9226.3ff724","type":"function","z":"1af44e44.e1caea","name":"Calculate average temperature","func":"// This expects the prefix of the topic to be averaged as\n// the msg.payload and the current time as msg.timestamp -\n// everything else is stored in the flow context.\n\nvar timestamp = msg.timestamp;\nvar temps = global.get(\"temps\");\nvar sum = 0;\nvar count = 0;\n\nconst TOO_LONG = global.get(\"TOO_LONG\");\n\ntemps.forEach(function(value, key) {\n    if (key.endsWith(msg.payload)) {\n        if (timestamp - value.last_updated >= TOO_LONG) {\n            node.warn(\"Sensor \" + key +\n                      \" is ignored because it was updated \"+\n                      \"too long ago.\")\n        }\n        else {\n            sum += value.temp;\n            ++count;\n        }\n    }\n});\n\nif (count > 0) {\n    msg.payload = (sum / count).toFixed(1);\n}\nelse {\n    node.warn(\"No valid sensors for \" + msg.payload);\n    msg.payload = 0.0;\n}\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":270,"y":80,"wires":[[]]},{"id":"36229fe3.1d828","type":"ui_gauge","z":"83365ccb.559558","name":"","group":"600f61c0.fbebb8","order":2,"width":0,"height":0,"gtype":"gage","title":"Hall","label":"F","format":"{{value}}","min":"40","max":"80","colors":["#729fcf","#8ae234","#cc0000"],"seg1":"60","seg2":"70","className":"","x":610,"y":120,"wires":[]},{"id":"2b3df83f.2cccc8","type":"ui_gauge","z":"83365ccb.559558","name":"","group":"600f61c0.fbebb8","order":1,"width":0,"height":0,"gtype":"gage","title":"Miles's Room","label":"F","format":"{{value}}","min":"40","max":"80","colors":["#729fcf","#8ae234","#cc0000"],"seg1":"60","seg2":"70","className":"","x":640,"y":160,"wires":[]},{"id":"e331e2dd.89ff38","type":"ui_gauge","z":"83365ccb.559558","name":"","group":"600f61c0.fbebb8","order":3,"width":0,"height":0,"gtype":"gage","title":"Max's Room","label":"F","format":"{{value}}","min":"40","max":"80","colors":["#729fcf","#8ae234","#cc0000"],"seg1":"60","seg2":"70","className":"","x":630,"y":200,"wires":[]},{"id":"faee1478.ae7f38","type":"inject","z":"83365ccb.559558","name":"Zero gauges on start","props":[{"p":"payload"}],"repeat":"","crontab":"","once":true,"onceDelay":0.1,"topic":"","payload":"0.0","payloadType":"num","x":160,"y":80,"wires":[["e331e2dd.89ff38","2b3df83f.2cccc8","36229fe3.1d828"]]},{"id":"6f9fb26e.f5b454","type":"switch","z":"83365ccb.559558","name":"Sensor location switch","property":"topic","propertyType":"msg","rules":[{"t":"cont","v":"hall","vt":"str"},{"t":"cont","v":"miles-room","vt":"str"},{"t":"cont","v":"max-room","vt":"str"}],"checkall":"false","repair":false,"outputs":3,"x":200,"y":160,"wires":[["36229fe3.1d828"],["2b3df83f.2cccc8"],["e331e2dd.89ff38"]]},{"id":"f05117c0.17cb18","type":"ui_gauge","z":"65ad7d23.70a2bc","name":"","group":"89166592.5b7728","order":1,"width":0,"height":0,"gtype":"gage","title":"Dining Room","label":"F","format":"{{value}}","min":"40","max":"80","colors":["#729fcf","#8ae234","#cc0000"],"seg1":"60","seg2":"70","className":"","x":670,"y":100,"wires":[]},{"id":"7019c4ff.83cf3c","type":"ui_gauge","z":"65ad7d23.70a2bc","name":"","group":"89166592.5b7728","order":2,"width":0,"height":0,"gtype":"gage","title":"Master Bedroom","label":"F","format":"{{value}}","min":"40","max":"80","colors":["#729fcf","#8ae234","#cc0000"],"seg1":"60","seg2":"70","className":"","x":680,"y":140,"wires":[]},{"id":"5e0c0fa7.1f001","type":"ui_gauge","z":"65ad7d23.70a2bc","name":"","group":"89166592.5b7728","order":3,"width":0,"height":0,"gtype":"gage","title":"Living Room","label":"F","format":"{{value}}","min":"40","max":"80","colors":["#729fcf","#8ae234","#cc0000"],"seg1":"60","seg2":"70","className":"","x":670,"y":180,"wires":[]},{"id":"6a3eea05.c928a4","type":"ui_gauge","z":"65ad7d23.70a2bc","name":"","group":"89166592.5b7728","order":4,"width":0,"height":0,"gtype":"gage","title":"Avengers Campus","label":"F","format":"{{value}}","min":"40","max":"80","colors":["#729fcf","#8ae234","#cc0000"],"seg1":"60","seg2":"70","className":"","x":690,"y":220,"wires":[]},{"id":"3694613a.8a2d76","type":"inject","z":"65ad7d23.70a2bc","name":"Zero gauges on start","props":[{"p":"payload"}],"repeat":"","crontab":"","once":true,"onceDelay":0.1,"topic":"","payload":"0.0","payloadType":"num","x":160,"y":80,"wires":[["6a3eea05.c928a4","5e0c0fa7.1f001","f05117c0.17cb18","7019c4ff.83cf3c"]]},{"id":"d413a1b7.8f6e8","type":"switch","z":"65ad7d23.70a2bc","name":"Sensor location switch","property":"topic","propertyType":"msg","rules":[{"t":"cont","v":"dining-room","vt":"str"},{"t":"cont","v":"master-bedroom","vt":"str"},{"t":"cont","v":"living-room","vt":"str"},{"t":"cont","v":"avengers-campus","vt":"str"}],"checkall":"false","repair":false,"outputs":4,"x":200,"y":160,"wires":[["f05117c0.17cb18"],["7019c4ff.83cf3c"],["5e0c0fa7.1f001"],["6a3eea05.c928a4"]]},{"id":"9b16bb0.b9dffc8","type":"ui_gauge","z":"f1b7c374.6327f","name":"","group":"524013df.74cabc","order":3,"width":0,"height":0,"gtype":"gage","title":"Matt's Office","label":"F","format":"{{value}}","min":"40","max":"80","colors":["#729fcf","#8ae234","#cc0000"],"seg1":"60","seg2":"70","className":"","x":670,"y":120,"wires":[]},{"id":"dfba2777.eca1c","type":"ui_gauge","z":"f1b7c374.6327f","name":"","group":"524013df.74cabc","order":2,"width":0,"height":0,"gtype":"gage","title":"Liz's Office","label":"F","format":"{{value}}","min":"40","max":"80","colors":["#729fcf","#8ae234","#cc0000"],"seg1":"60","seg2":"70","className":"","x":670,"y":160,"wires":[]},{"id":"ff4bec6e.45b368","type":"ui_gauge","z":"f1b7c374.6327f","name":"","group":"524013df.74cabc","order":1,"width":0,"height":0,"gtype":"gage","title":"Main Area","label":"F","format":"{{value}}","min":"40","max":"80","colors":["#729fcf","#8ae234","#cc0000"],"seg1":"60","seg2":"70","className":"","x":670,"y":200,"wires":[]},{"id":"2ac5efb4.56505","type":"inject","z":"f1b7c374.6327f","name":"Zero gauges on start","props":[{"p":"payload"}],"repeat":"","crontab":"","once":true,"onceDelay":0.1,"topic":"","payload":"0.0","payloadType":"num","x":160,"y":80,"wires":[["ff4bec6e.45b368","dfba2777.eca1c","9b16bb0.b9dffc8"]]},{"id":"e566abe8.54bd5","type":"switch","z":"f1b7c374.6327f","name":"Sensor location switch","property":"topic","propertyType":"msg","rules":[{"t":"cont","v":"matts-office","vt":"str"},{"t":"cont","v":"lizs-office","vt":"str"},{"t":"cont","v":"main","vt":"str"}],"checkall":"false","repair":false,"outputs":3,"x":200,"y":160,"wires":[["9b16bb0.b9dffc8"],["dfba2777.eca1c"],["ff4bec6e.45b368"]]},{"id":"26b8af21.ad43d8","type":"function","z":"9f9a87f3.ed673","name":"Temp text generation","func":"// Input messages are just used to indicate that we should\n// run the function - everything else is taken from global\n// state.\nvar overrides = global.get(\"overrides\");\nvar zone = overrides.get(msg.topic);\nconst DEVIATION = global.get(\"DEVIATION\");\n\nif (zone.enabled) {\n    var min = zone.temp - DEVIATION;\n    var max = zone.temp + DEVIATION;\n    msg.payload = \"The temperature will be kept between \" + \n                  min + \" and \" + max + \". (This resets back \" +\n                  \"to default at noon and midnight.)\";\n}\nelse {\n    msg.payload = \"The temperature will be automatically controlled.\";\n}\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":240,"y":40,"wires":[[]]},{"id":"f3dacb6c.2ec2e8","type":"function","z":"8ddbcca0.232738","name":"Temp override enable","func":"var overrides = global.get(\"overrides\");\nvar zone = overrides.get(msg.topic);\n\nzone.enabled = msg.payload;\n\noverrides.set(msg.topic, zone);\nglobal.set(\"overrides\", overrides);\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":240,"y":40,"wires":[[]]},{"id":"26836b6.75ea714","type":"function","z":"8953881b.c1486","name":"Store temp setpoint","func":"var overrides = global.get(\"overrides\");\nvar zone = overrides.get(msg.topic);\n\nzone.temp = msg.payload;\n\noverrides.set(msg.topic, zone);\nglobal.set(\"overrides\", overrides);\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":230,"y":40,"wires":[[]]},{"id":"d3c1f5b9.e5a3e","type":"function","z":"ec5047e5.1fe1d","name":"Temp UI set","func":"var overrides = global.get(\"overrides\");\nvar fans = global.get(\"fans\");\n\nvar override = {};\noverride.topic = msg.topic;\noverride.payload = overrides.get(msg.topic).enabled;\n\nvar setpoint = {};\nsetpoint.topic = msg.topic;\nsetpoint.payload = overrides.get(msg.topic).temp;\n\nvar fan_state = {};\nfan_state.topic = msg.topic;\nfan_state.payload = fans.get(msg.topic).enabled;\n\nreturn [override, setpoint, fan_state];","outputs":3,"noerr":0,"initialize":"","finalize":"","libs":[],"x":210,"y":80,"wires":[[],[],[]]},{"id":"eab09f69.dd877","type":"function","z":"135e86d8.5c99a1","name":"Want to boolean logic mapper","func":"// start by declaring all of our outputs and setting them\n// to off\nvar heat = {};\nheat.topic = \"heat\";\nheat.payload = 0;\n\nvar cool = {};\ncool.topic = \"cool\";\ncool.payload = 0;\n\nvar fan = {};\nfan.topic = \"fan\";\nfan.payload = 0;\n\nif (msg.payload == \"heating\") {\n    heat.payload = 1;\n}\nelse if (msg.payload == \"cooling\") {\n    cool.payload = 1;\n}\nelse if (msg.payload == \"fan on\") {\n    fan.payload = 1;\n} \nelse if (msg.payload != \"idle\") {\n    node.warn(\"Unknown want \" + msg.payload);\n}\n\nreturn [heat, cool, fan];","outputs":3,"noerr":0,"initialize":"","finalize":"","libs":[],"x":270,"y":100,"wires":[[],[],[]]},{"id":"6e41f916.df7f68","type":"function","z":"8c7b36e3.309c68","name":"Fan enable","func":"var fans = global.get(\"fans\");\nvar zone = fans.get(msg.topic);\n\nzone.enabled = msg.payload;\n\nfans.set(msg.topic, zone);\nglobal.set(\"fan\", fans);\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":170,"y":40,"wires":[[]]},{"id":"6b4b7bb0.25e5f4","type":"function","z":"a9211c68.6381c","name":"Fan text generation","func":"// Input messages are just used to indicate that we should\n// run the function - everything else is taken from global\n// state.\nvar fans = global.get(\"fans\");\nvar zone = fans.get(msg.topic);\n\nif (zone.enabled) {\n    msg.payload = \"The fan will be kept on. (This resets back \" +\n                  \"to default at noon and midnight.)\";\n}\nelse {\n    msg.payload = \"The fan will be automatically controlled.\";\n}\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":190,"y":40,"wires":[[]]},{"id":"c20d5ce4.b35a2","type":"flogger","z":"c956f6e4.937a7","g":"6f07d525.5ab154","name":"Data log","logfile":"data.log","inputchoice":"moustache","inputobject":"payload","inputobjectType":"msg","inputmoustache":"{{topic}} reports {{payload}}","loglevel":"INFO","logconfig":"7a8578cd.e0755","sendpane":true,"x":840,"y":580,"wires":[[]]},{"id":"805ee380.6c968","type":"function","z":"c956f6e4.937a7","g":"6f07d525.5ab154","name":"Global variable init and temp update.","func":"// This updates our temperature store with the received\n// temperature and then passes the message on so that it\n// can be used for whatever purpose we want.\n// Most notably, it is used to trigger the averaging logic,\n// which modifies the message to serve its own purposes.\n\nvar temps = global.get(\"temps\");\n\nconst MAX_TEMP_DELTA = global.get(\"MAX_TEMP_DELTA\");\n\nvar email;\n\n// only save predefined keys, as the intent is to operate from\n// an explicit list\nif(temps.has(msg.topic)) {\n    var last = temps.get(msg.topic);\n    // sanity check - make sure it is in our valid range\n    // before storing it. Otherwise, it will just stop \n    // updating and we'll get a message to change the\n    // batteries.\n    // Note the exception if we've not read it before.\n    // If we fail to update it with a valid value in a long\n    // enough time, we'll report it as having failed, which\n    // is close to the truth - it might still be up, but it's\n    // been giving us bonkers values so it's useless.\n    if(Math.abs(last.temp - msg.payload) < MAX_TEMP_DELTA ||\n        last.last_updated == 0) {\n        temps.set(msg.topic, {temp: msg.payload, \n                            last_updated: msg.timestamp});\n\n        global.set(\"temps\", temps);\n    }\n    else {\n        node.warn(\"Ignoring bonkers value \" + msg.payload +\n        \"reported by \" + msg.topic + \". (Previous was \" +\n        last.temp + \".)\");\n        \n        email = {};\n        email.topic = \"WARNING - discarding data from \" + msg.topic;\n        email.payload = \"Ignoring bonkers value \" + msg.payload +\n                        \" reported by \" + msg.topic + \n                        \". (Previous was \" + last.temp + \".)\"\n    }\n}\nelse {\n    node.warn(\"Ignoring spurious sensor \" + msg.topic);\n    \n    email = {};\n    email.topic = \"WARNING - Ignoring spurious sensor \" +\n                  msg.topic;\n}\n\nreturn [msg, email];","outputs":2,"noerr":0,"initialize":"\n// A time period past which a sensor hasn't reported in\n// and should not be used for control purposes.\n// It's in milliseconds because JS timestamps are in\n// milliseconds.\n// We set it here so we only need to change it in one spot.\nglobal.set(\"TOO_LONG\", 660000); // 11 minutes, in milliseconds\n                                // this means we've missed it\n                                // for what should be 2\n                                // reporting periods, plus a\n                                // bit to account for network\n                                // variability.\n\n// Minimum temperature differential where we determine to just\n// run the fan and not engage heating or cooling. That is,\n// if another zone is this many degrees warmer or cooler\n// than the given zone (as appropriate), just run the fan.\nglobal.set(\"FAN_DIFFERENTIAL\", 5);\n\n// Allowable deviation from a given setpoint, in degrees F.\nglobal.set(\"DEVIATION\", 2);\n\n// Temp too low. Below this, we sound an alarm (meaning we\n// send an email)\nglobal.set(\"TOO_LOW_TEMP\", 45);\n\n// Minimum temp imposed in bonkers mode.\nglobal.set(\"BONKERS_MODE_MIN_TEMP\", 50);\n\n// Bonkers mode fan circulation duration\nglobal.set(\"BONKERS_MODE_FAN_TIME\", 600000); // 10 minutes, in\n                                             // milliseconds\n\n// max delta from previous reading\n// towards the end of the battery life, the voltage can drop\n// low enough that the sensor starts to return bonkers values.\n// Anything more than this in a single interval is discarded.\nglobal.set(\"MAX_TEMP_DELTA\", 20);\n\n// Common temperatures for zones depending on usage.\n// All temperatures in degrees F.\n\n// Min/Max for zones where no one is present.\nglobal.set(\"EMPTY_ZONE_MIN_TEMP\", 50);\nglobal.set(\"EMPTY_ZONE_MAX_TEMP\", 75);\n\n// Min/Max for zones where people are sleeping.\nglobal.set(\"SLEEPING_ZONE_MIN_TEMP\", 55);\nglobal.set(\"SLEEPING_ZONE_MAX_TEMP\", 70);\n\n// Min/Max for zones where people are active\nglobal.set(\"ACTIVE_ZONE_MIN_TEMP\", 60);\nglobal.set(\"ACTIVE_ZONE_MAX_TEMP\", 72);\n\n// Limit to statistics that we want to keep (in milliseconds,\n// because it's timestamp math)\n// 60 seconds * 60 minutes * 24 hours * 30 days * 1000 (milliseconds)\nglobal.set(\"STATISTICS_TOO_OLD\", 2592000000);\n\n// our temps are a map of objects indexed by the topic with \n// the temperature\" prefix removed.\n// We preestablish the list so we can note when a sensor\n// is missing from what we expect.\n// Note that this is saved via the data save trigger, and\n// is overwritten by the data load trigger, so if you add\n// or remove anything from this list, it will get overwritten\n// by the saved data unless you remove the file.\nvar temps = new Map([\n    [\"matts-office.basement\", {temp: 0, last_updated: 0}],\n    [\"lizs-office.basement\",  {temp: 0, last_updated: 0}],\n    [\"main.basement\",         {temp: 0, last_updated: 0}],\n\n    [\"dining-room.main-floor\",    {temp: 0, last_updated: 0}],\n    [\"master-bedroom.main-floor\", {temp: 0, last_updated: 0}],\n    [\"living-room.main-floor\",    {temp: 0, last_updated: 0}],\n    [\"adventure-bay.main-floor\",  {temp: 0, last_updated: 0}],\n\n    [\"hall.upstairs\",       {temp: 0, last_updated: 0}],\n    [\"boys-room.upstairs\",  {temp: 0, last_updated: 0}],\n    [\"guest-room.upstairs\", {temp: 0, last_updated: 0}],\n]);\n\nglobal.set(\"temps\", temps);\n\n// Our set of overrides\nvar overrides = new Map([\n    [\"basement\", {temp: 65, enabled: false}],\n    [\"main-floor\", {temp: 65, enabled: false}],\n    [\"upstairs\", {temp: 65, enabled: false}],\n]);\nglobal.set(\"overrides\", overrides);\n\n// Our set of fans\nvar fans = new Map([\n    [\"basement\", {enabled: false}],\n    [\"main-floor\", {enabled: false}],\n    [\"upstairs\", {enabled: false}],\n]);\nglobal.set(\"fans\", fans);\n\n// Vacation mode\nvar vacation_mode = {\n    enabled: false,\n    min_temp: 50,\n    max_temp: 80\n};\nglobal.set(\"vacation_mode\", vacation_mode);\n\n// All fan mode\nvar all_fan_mode = {\n    enabled: false,\n};\nglobal.set(\"all_fan_mode\", all_fan_mode);\n\n// local temp is locally connected, so should always be\n// valid and the last_updated isn't tracked - we just\n// establish it here.\nglobal.set(\"local_temp\", 0.0);\n\n// Not in bonkers mode\nglobal.set(\"bonkers_mode_started\", 0);\n\n// Initialize empty stats map\nvar statistics = new Map();\nglobal.set(\"statistics\", statistics);\n","finalize":"","libs":[],"x":210,"y":640,"wires":[["217babd9.8c62c4","49cdecea.aa7f44","85bd42f1.5e33b"],["a4afde8d79d0a552"]]},{"id":"621ca232.da3ffc","type":"switch","z":"c956f6e4.937a7","g":"1fa2872e.1bad99","name":"Route message by floor","property":"topic","propertyType":"msg","rules":[{"t":"cont","v":"upstairs","vt":"str"},{"t":"cont","v":"main-floor","vt":"str"},{"t":"cont","v":"basement","vt":"str"}],"checkall":"false","repair":false,"outputs":3,"x":1010,"y":160,"wires":[["42f3e1a6.aef098","a69b4e2b.ceecd8"],["ade60ea4.bf4fb8","1a6e305.5f2785"],["39a68f99.30fa78","d9cb9b2b.9129c"]]},{"id":"13c36e92.2d51e9","type":"change","z":"c956f6e4.937a7","g":"6f07d525.5ab154","name":"Set topic and timestamp / ensure numeric payload","rules":[{"t":"set","p":"topic","pt":"msg","to":"$substringBefore(payload, \": \")","tot":"jsonata"},{"t":"set","p":"timestamp","pt":"msg","to":"","tot":"date"},{"t":"set","p":"payload","pt":"msg","to":"$number($substringAfter(payload, \": \"))","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":470,"y":580,"wires":[["805ee380.6c968","c20d5ce4.b35a2","0d3dbb7b47322fc0"]]},{"id":"80d40d8b.e533c8","type":"inject","z":"c956f6e4.937a7","g":"9d1fcef.684b7b","name":"Missing sensor check logic trigger","props":[{"p":"payload"}],"repeat":"14400","crontab":"","once":false,"onceDelay":"30","topic":"","payload":"","payloadType":"date","x":200,"y":1440,"wires":[["15f10963.e52dc7"]]},{"id":"1e8eb4b8.c906fb","type":"inject","z":"c956f6e4.937a7","g":"d2f05012.6300e8","name":"Zone control logic trigger","props":[{"p":"timestamp","v":"","vt":"date"}],"repeat":"300","crontab":"","once":false,"onceDelay":"300","topic":"","payloadType":"str","x":170,"y":2720,"wires":[["d52206bc.640af","8dfd4695.ef4ec"]]},{"id":"15f10963.e52dc7","type":"function","z":"c956f6e4.937a7","g":"9d1fcef.684b7b","name":"Check for missing sensors","func":"// timestamp was generated by the trigger and is the standard\n// JavaScript timestamp - that is, milliseconds since the epoch.\nvar timestamp = msg.payload;\n\nvar temps = global.get(\"temps\");\n\nconst TOO_LONG = global.get(\"TOO_LONG\");\n\nvar missing = [];\n\ntemps.forEach(function(value, key) {\n    if (timestamp - value.last_updated >= TOO_LONG) {\n        missing.push(key);\n    }\n});\n\nif (missing.length > 0) {\n    msg.topic = \"Missing sensors\"\n    msg.payload = \"The following sensors haven't reported in \" +\n                  \"recently. They probably need new \" +\n                  \"batteries.\\n\\n\";\n    missing.forEach(function(value) {\n        msg.payload += value + \"\\n\";\n    });\n    node.send(msg);\n}\n\nreturn;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":520,"y":1440,"wires":[["31e4e46b.aec78c","9b1b4114.9ab368"]]},{"id":"75a98779.33d778","type":"file","z":"c956f6e4.937a7","g":"bf1e0396.a5cbf","name":"Write temps to file","filename":"temps","appendNewline":false,"createDir":false,"overwriteFile":"true","encoding":"none","x":670,"y":1040,"wires":[[]]},{"id":"336b64d5.bad99c","type":"inject","z":"c956f6e4.937a7","g":"bf1e0396.a5cbf","name":"Data save trigger","props":[{"p":"payload"}],"repeat":"180","crontab":"","once":false,"onceDelay":"1","topic":"","payload":"","payloadType":"date","x":150,"y":1080,"wires":[["6c1fea2d.f8be04","f87d2ec7.593458","fb33fae7.41b9f","230d11498551f7dc"]]},{"id":"6c1fea2d.f8be04","type":"function","z":"c956f6e4.937a7","g":"bf1e0396.a5cbf","name":"Get current temp data","func":"msg.payload = JSON.stringify(\n        Array.from(global.get(\"temps\").entries()));\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":440,"y":1040,"wires":[["75a98779.33d778"]]},{"id":"3c4de12c.0ed246","type":"inject","z":"c956f6e4.937a7","g":"4cf002bb.ebebb4","name":"Data load trigger","props":[{"p":"payload"}],"repeat":"","crontab":"","once":true,"onceDelay":"0.1","topic":"","payload":"","payloadType":"date","x":150,"y":60,"wires":[["bb5b866f.7ab148"]]},{"id":"bb5b866f.7ab148","type":"file in","z":"c956f6e4.937a7","g":"4cf002bb.ebebb4","name":"Read temps from file","filename":"temps","format":"utf8","chunk":false,"sendError":false,"encoding":"none","x":380,"y":80,"wires":[["7927dab2.9fe2c4","8959b7ef1de4fba1"]]},{"id":"7927dab2.9fe2c4","type":"function","z":"c956f6e4.937a7","g":"4cf002bb.ebebb4","name":"Parse temp data from file, store in context and send to nodes.","func":"var saved_temps = new Map(JSON.parse(msg.payload));\nvar temps = global.get(\"temps\", temps);\nvar tempkey;\n// We assume that the temps map defined in the global init\n// function has the one true list of sensors and that any\n// data that was stored in the file may either be incomplete\n// (we added a sensor), or have extra data (we removed a\n// sensor). As a result, go through the map we read from the\n// file and update any items that exist in the global map, then\n// save it.\nsaved_temps.forEach(function(value, key) {\n    if (temps.has(key)) {\n        temps.set(key, {temp: value.temp, \n                        last_updated: value.last_updated});\n    }\n});\n\nglobal.set(\"temps\", temps);\n\n// Once set, generate messages for each one to update the UI\n// elements.\ntemps.forEach(function(value, key) {\n    msg.topic = key;\n    msg.payload = value.temp;\n    node.send(msg);\n});\n\nreturn;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":300,"y":140,"wires":[["0d3dbb7b47322fc0"]]},{"id":"42f3e1a6.aef098","type":"subflow:83365ccb.559558","z":"c956f6e4.937a7","g":"1fa2872e.1bad99","name":"","x":1310,"y":60,"wires":[]},{"id":"ade60ea4.bf4fb8","type":"subflow:65ad7d23.70a2bc","z":"c956f6e4.937a7","g":"1fa2872e.1bad99","name":"","x":1320,"y":140,"wires":[]},{"id":"39a68f99.30fa78","type":"subflow:f1b7c374.6327f","z":"c956f6e4.937a7","g":"1fa2872e.1bad99","name":"","env":[],"x":1320,"y":220,"wires":[]},{"id":"53b4e133.9b68e","type":"ui_gauge","z":"c956f6e4.937a7","g":"40441e05.580d08","name":"","group":"b88f3265.acdf3","order":1,"width":0,"height":0,"gtype":"gage","title":"Average Temperature","label":"F","format":"{{value}}","min":"40","max":"80","colors":["#729fcf","#8ae234","#cc0000"],"seg1":"60","seg2":"70","className":"","x":1020,"y":940,"wires":[]},{"id":"ee3cfe46.b4e0a8","type":"ui_gauge","z":"c956f6e4.937a7","g":"40441e05.580d08","name":"","group":"2c421088.8015b","order":1,"width":0,"height":0,"gtype":"gage","title":"Average Temperature","label":"F","format":"{{value}}","min":"40","max":"80","colors":["#729fcf","#8ae234","#cc0000"],"seg1":"60","seg2":"70","className":"","x":1020,"y":900,"wires":[]},{"id":"85bd42f1.5e33b","type":"change","z":"c956f6e4.937a7","g":"40441e05.580d08","name":"Basement injector","rules":[{"t":"set","p":"payload","pt":"msg","to":"basement","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":550,"y":940,"wires":[["9a8dfae0.428bd8"]]},{"id":"49cdecea.aa7f44","type":"change","z":"c956f6e4.937a7","g":"40441e05.580d08","name":"Main Floor injector","rules":[{"t":"set","p":"payload","pt":"msg","to":"main-floor","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":550,"y":900,"wires":[["1df8ebc4.22f2bc"]]},{"id":"217babd9.8c62c4","type":"change","z":"c956f6e4.937a7","g":"40441e05.580d08","name":"Upstairs injector","rules":[{"t":"set","p":"payload","pt":"msg","to":"upstairs","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":540,"y":860,"wires":[["88c52bc9.8c7ba8"]]},{"id":"88c52bc9.8c7ba8","type":"subflow:1af44e44.e1caea","z":"c956f6e4.937a7","g":"40441e05.580d08","name":"","env":[],"x":770,"y":860,"wires":[["88d470eb.f9de9"]]},{"id":"1df8ebc4.22f2bc","type":"subflow:1af44e44.e1caea","z":"c956f6e4.937a7","g":"40441e05.580d08","name":"","x":770,"y":900,"wires":[["ee3cfe46.b4e0a8"]]},{"id":"9a8dfae0.428bd8","type":"subflow:1af44e44.e1caea","z":"c956f6e4.937a7","g":"40441e05.580d08","name":"","x":770,"y":940,"wires":[["53b4e133.9b68e"]]},{"id":"88d470eb.f9de9","type":"ui_gauge","z":"c956f6e4.937a7","g":"40441e05.580d08","name":"","group":"33581fd97c491de8","order":1,"width":0,"height":0,"gtype":"gage","title":"Average Temperature","label":"F","format":"{{value}}","min":"40","max":"80","colors":["#729fcf","#8ae234","#cc0000"],"seg1":"60","seg2":"70","className":"","x":1020,"y":860,"wires":[]},{"id":"31e4e46b.aec78c","type":"e-mail","z":"c956f6e4.937a7","g":"9d1fcef.684b7b","server":"mail.domain.net","port":"25","secure":false,"tls":false,"name":"email@domain.net","dname":"Missing Sensors","x":780,"y":1440,"wires":[]},{"id":"d52206bc.640af","type":"function","z":"c956f6e4.937a7","g":"d2f05012.6300e8","name":"Zone control logic","func":"// This implements all of the custom logic for each zone.\n// It is rather complex, because we have very specific\n// requirements, largely centered around anticipating zone\n// usage.\n\n// Grab our list of constants set elsewhere.\nconst TOO_LONG = global.get(\"TOO_LONG\");\nconst DEVIATION = global.get(\"DEVIATION\");\nconst FAN_DIFFERENTIAL = global.get(\"FAN_DIFFERENTIAL\");\nconst BONKERS_MODE_MIN_TEMP = global.get(\"BONKERS_MODE_MIN_TEMP\");\nconst BONKERS_MODE_FAN_TIME = global.get(\"BONKERS_MODE_FAN_TIME\");\nconst EMPTY_ZONE_MIN_TEMP = global.get(\"EMPTY_ZONE_MIN_TEMP\");\nconst EMPTY_ZONE_MAX_TEMP = global.get(\"EMPTY_ZONE_MAX_TEMP\");\nconst SLEEPING_ZONE_MIN_TEMP = global.get(\"SLEEPING_ZONE_MIN_TEMP\")\nconst SLEEPING_ZONE_MAX_TEMP = global.get(\"SLEEPING_ZONE_MAX_TEMP\")\nconst ACTIVE_ZONE_MIN_TEMP = global.get(\"ACTIVE_ZONE_MIN_TEMP\")\nconst ACTIVE_ZONE_MAX_TEMP = global.get(\"ACTIVE_ZONE_MAX_TEMP\")\n\nconst HEAT    = \"heating\";\nconst COOL    = \"cooling\";\nconst FAN     = \"fan on\";\nconst IDLE    = \"idle\";\nconst BONKERS = \"bonkers\"; // not something we \"want\", but more\n                           // an \"indecisive\" - we can't figure\n                           // it out\n\n// grab our global temps, override, fans, vacation_mode,\n// and all_fan_mode states\nvar temps = global.get(\"temps\");\nvar overrides = global.get(\"overrides\");\nvar fans = global.get(\"fans\");\nvar vacation_mode = global.get(\"vacation_mode\");\nvar all_fan_mode = global.get(\"all_fan_mode\");\n\n// grab our time at start so we don't get confused because\n// we get a day/hour flip partway through. We could use\n// Date.now(), but we'll use the timestamp of the trigger,\n// because, why not?\n// We need this both as a date object and as a timestamp.\nvar timestamp = msg.timestamp;\nvar now = new Date(timestamp);\n\n// This is the same logic as the function in the\n// \"Calculate Average Temp\" subflow.\nfunction calculateAverage(zone)\n{\n    var sum = 0;\n    var count = 0;\n    var avg = 0;\n\n    temps.forEach(function(value, key) {\n        if (key.endsWith(zone)) {\n            // special case - we always ignore adventure bay\n            // for control functions, because it always runs\n            // warm and that's the way the boys like it.\n            if (key != \"adventure-bay.main-floor\") {\n                // This logic is inverted from the averaging\n                // used for the gauges because the message\n                // is removed. After all, the gauge\n                // calculations are already going to be\n                // complaining bitterly - no need to have\n                // this complain too.\n                if (timestamp - value.last_updated < TOO_LONG) {\n                    sum += value.temp;\n                    ++count;\n                }\n            }\n        }\n    });\n\n    if (count > 0) {\n        avg = (sum / count).toFixed(1);\n    }\n    else {\n        avg = 0.0;\n    }\n\n    return avg;\n}\n\n// Somewhat obviously, weekend days are Saturday and Sunday.\nfunction isWeekend()\n{\n    var weekend = false;\n\n    // Sunday is 0, Saturday is 6.\n    if (now.getDay() == 0 ||\n        now.getDay() == 6) {\n            weekend = true;\n    }\n    return weekend;\n}\n\n// Also obviously, weekdays are not weekends.\nfunction isWeekday()\n{\n    return !isWeekend();\n}\n\n// Whether or not it is woodstove season. Woodstove season\n// (that is, the time period during which we are likely to\n// run the woodstove) runs from 01 Nov to 01 April\nfunction isWoodstoveSeason() {\n    // Jan = 0\n    // Feb = 1\n    // Mar = 2\n    // Apr = 3\n    // May = 4\n    // Jun = 5\n    // Jul = 6\n    // Aug = 7\n    // Sep = 8\n    // Oct = 9\n    // Nov = 10\n    // Dec = 12\n    \n    // Any month equal or later than October and\n    // less than April\n    if (now.getMonth() >= 9 && now.getMonth() < 3 ) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\n// some average temperatures that the following control\n// functions might use\n\nvar averages = new Map();\n\naverages.set(\"upstairs\", calculateAverage(\"upstairs\"));\naverages.set(\"main-floor\", calculateAverage(\"main-floor\"));\naverages.set(\"basement\", calculateAverage(\"basement\"));\n\n// Determine if a zone's want can be satisfied by just\n// running the fan.\n// Note that this is somewhat counterintuitive, in that it\n// only moves air if the zone which has what we want is MUCH\n// hotter/colder than we are (that is, more than FAN_DIFFERENTIAL\n// degrees different). The rationale here is that, when doing\n// experimentation, a small temperature difference would have\n// the fan running for a long time trying to get where it needs\n// to be and it would never get there. However, if there is\n// a large difference in temperatures, it does work to\n// heat/cool it at least some of the way with that other\n// bank of air.\nfunction fanCheck(zone, want, current_temp)\n{\n    // check to see if what we want may be somewhere else\n    // in the house, and we should downgrade our\n    // heating/cooling call to just a \"run the fan\"\n    \n    if (want == HEAT) {\n        averages.forEach(function(value, key) {\n            // only look at the averages for *not* our zone.\n            if (key != zone) {\n                // If we wanted heat, we want the other\n                // zone's temperature to be greater than\n                // our current temperature, else it's colder\n                // than we are.\n                if (value - current_temp > FAN_DIFFERENTIAL) {\n                    want = FAN;\n                }\n            }\n        });\n    }\n    else if (want == COOL) {\n        averages.forEach(function(value, key) {\n            // only look at the averages for *not* our zone.\n            if (key != zone) {\n                // If we wanted cool, we want the other\n                // zone's temperature to be greater than\n                // our current temperature, else it's warmer\n                // than we are.\n                if (current_temp - value > FAN_DIFFERENTIAL) {\n                    want = FAN;\n                }\n            }\n        });\n    }\n    \n    return want;\n}\n\n// Determine what an individual zone wants.\nfunction getWant(zone, current_temp, min_temp, max_temp)\n{\n    var wants = IDLE;\n    var allow_fan = true;\n    \n    // Sanity check - 0.0 is the dead/expired sensor value.\n    if (current_temp == 0.0) {\n        node.warn(\"Bonkers temp value - \" + zone);\n        wants = BONKERS;\n    }\n    else if (current_temp < min_temp) {\n        // we're too cold\n        wants = HEAT;\n        \n        if (min_temp - current_temp > DEVIATION) {\n            // we're way colder than we should be, don't\n            // just rely on fan.\n            allow_fan = false;\n        }\n    }\n    else if (current_temp > max_temp &&\n                !isWoodstoveSeason()) {\n        // we're too hot - with a minor caveat - we never\n        // cool during woodstove season, because that is\n        // a second heat source, and we want to allow it\n        // to \"overheat\" areas and then we'll circulate\n        // that through the house. as other zones call\n        // for heat and we do a fanCheck() on them.\n        wants = COOL;\n        \n        if (current_temp - max_temp > DEVIATION) {\n            // we're way warmer than we should be, don't\n            // just rely on fan.\n            allow_fan = false;\n        }\n    }\n    \n    // check to see if we should just turn on the fan.\n    if (allow_fan) {\n        wants = fanCheck(zone, wants, current_temp);\n    }\n    \n    node.warn(\"Zone \" + zone + \" wants \" + wants +\n              \" (min = \" + min_temp + \", max = \" + max_temp +\n              \", cur = \" + current_temp + \")\");\n    \n    return wants;\n}\n\n// Get desired temperature or fall back to the zone average\n// if it is stale\nfunction getTempOrAverage(desired_temp, zone)\n{\n    var temp = temps.get(desired_temp);\n    // check validity\n    if (timestamp - temp.last_updated >= TOO_LONG) {\n        // sensor is stale, overwrite with average and use\n        // that as a fallback.\n        temp = averages.get(zone);\n        // We don't complain here, because the gauge\n        // averaging already is.\n    }\n    else {\n        temp = temp.temp;\n    }\n    return temp;\n}\n\nfunction controlUpstairs()\n{\n    // Upstairs works similarly to main floor (below), but with\n    // fewer constraints.\n    // 1. We assume people are sleeping between\n    //    20:00 and 07:00 on weekdays, 20:00 and 08:00 on\n    //    weekends.. ~~During this period, boys-room\n    //    should be used for zone priority, with the floor\n    //    average as a fallback.~~\n    //    Update: 20220826 - the boys say their bedroom is\n    //    \"fine to a little cool\", so we're trying just using\n    //    the average, since their bedroom takes several hours\n    //    to come down to temperature relative to the other rooms\n    //    (this is likely due to duct placement and airflow, which\n    //    we are limited in what we can do without ripping into the\n    //    floor).\n    // 2. We want it to start to come up to active temperature\n    //    and hold that temperature until 08:00 on weekdays\n    //    and 09:00 on weekends - average temperature should\n    //    be used here.\n    // 3. After that, it can go to the \"empty\" holding\n    //    temperature based on the floor average.\n    // 4. Then it can go to the empty temperature again until\n    //    20:00, when rule (1) comes into play.\n\n    var current_temp = averages.get(\"upstairs\");\n\n    // Start by assuming it's empty and get what we want\n    // for that based on the average. Will override later.\n    var wants = getWant(\"upstairs\",\n                        current_temp,\n                        EMPTY_ZONE_MIN_TEMP,\n                        EMPTY_ZONE_MAX_TEMP);\n\n    // morning active time check - this also uses floor\n    // average which is already set above\n    if (isWeekend()) {\n        if (now.getHours() >= 8 && now.getHours() < 9) {\n            wants = getWant(\"upstairs\",\n                            current_temp,\n                            ACTIVE_ZONE_MIN_TEMP,\n                            ACTIVE_ZONE_MAX_TEMP);\n        }\n    }\n    else {\n        // weekday\n        if (now.getHours() >= 7 && now.getHours() < 8) {\n            wants = getWant(\"upstairs\",\n                            current_temp,\n                            ACTIVE_ZONE_MIN_TEMP,\n                            ACTIVE_ZONE_MAX_TEMP);\n        }\n    }\n\n    // Update 20220826 - see note above, just use average\n    // for this as well, so don't override the current value of\n    // the variable.\n    // Sleeping time check - keys off boys room\n    //  current_temp = getTempOrAverage(\"boys-room.upstairs\",\n    //                                  \"upstairs\");\n\n    if (isWeekend()) {\n        if (now.getHours() < 8 || now.getHours() >= 20) {\n            wants = getWant(\"upstairs\",\n                            current_temp,\n                            SLEEPING_ZONE_MIN_TEMP,\n                            SLEEPING_ZONE_MAX_TEMP);\n        }\n    }\n    else {\n        // weekday\n        if (now.getHours() < 7 || now.getHours() >= 20) {\n            wants = getWant(\"upstairs\",\n                            current_temp,\n                            SLEEPING_ZONE_MIN_TEMP,\n                            SLEEPING_ZONE_MAX_TEMP);\n        }\n    }\n\n    return wants;\n}\n\nfunction controlMainFloor()\n{\n    // The main floor has a variety of constraints.\n    // 1. We assume people are sleeping between\n    //    21:00 and 07:00 on weekdays, 21:00 and 08:00 on\n    //    weekends.. During this period, master-bedroom\n    //    should be used for zone priority, with the floor\n    //    average as a fallback.\n    // 2. We want it to start to come up to active temperature\n    //    and hold that temperature until 08:00 on weekdays\n    //    and 10:00 on weekends - average temperature should\n    //    be used here.\n    // 3. After that, it can go to the \"empty\" holding\n    //    temperature based on the floor average.\n    // 4. Until 12:00, when it should come to the active\n    //    temperature until 13:00 (for lunch), keyed off the\n    //    dining room sensor.\n    // 5. Then it can go to the \"empty\" temperature based on\n    //    the average.\n    // 6. Until 17:30, when it should come to the active\n    //    temperature again, based off the dining room sensor,\n    //    until 19:00 (for dinner).\n    // 7. Then it can go to the empty temperature again until\n    //    21:00, when rule (1) comes into play.\n    \n    // We assume we want whatever action will maintain\n    // the empty zone temperature based on the\n    // zone average.    \n    var wants = getWant(\"main-floor\",\n                        averages.get(\"main-floor\"),\n                        EMPTY_ZONE_MIN_TEMP,\n                        EMPTY_ZONE_MAX_TEMP);\n\n    // sleeping time check - use master bedroom with fallback\n    current_temp = getTempOrAverage(\n                        \"master-bedroom.main-floor\",\n                        \"main-floor\");\n\n    if (isWeekend()) {\n        // weekend\n        if (now.getHours() < 8 || now.getHours() >= 21) {\n            wants = getWant(\"main-floor\",\n                            current_temp,\n                            SLEEPING_ZONE_MIN_TEMP,\n                            SLEEPING_ZONE_MAX_TEMP);\n        }\n    }\n    else {\n        // weekday\n        if (now.getHours() < 7 || now.getHours() >= 21) {\n            wants = getWant(\"main-floor\",\n                            current_temp,\n                            SLEEPING_ZONE_MIN_TEMP,\n                            SLEEPING_ZONE_MAX_TEMP);\n        }\n    }\n\n    // morning active time check - use floor average\n    current_temp = averages.get(\"main-floor\");\n\n    if (isWeekend()) {\n        if (now.getHours() >= 8 && now.getHours() < 10) {\n            wants = getWant(\"main-floor\",\n                            current_temp,\n                            ACTIVE_ZONE_MIN_TEMP,\n                            ACTIVE_ZONE_MAX_TEMP);\n        }\n    }\n    else {\n        if (now.getHours() >= 7 && now.getHours() < 8) {\n            wants = getWant(\"main-floor\",\n                            current_temp,\n                            ACTIVE_ZONE_MIN_TEMP,\n                            ACTIVE_ZONE_MAX_TEMP);\n        }\n    }\n\n    // lunch and dinner time checks - both do the same thing\n    // regardless of weekday or weekend\n    current_temp = getTempOrAverage(\n                        \"dining-room.main-floor\",\n                        \"main-floor\");\n\n    if ((now.getHours() >= 12 && now.getHours() < 13) ||\n        (((now.getHours() >= 17 && now.getMinutes() >= 30) ||\n            now.getHours() >= 18) &&\n                now.getHours() < 19)) {\n            wants = getWant(\"main-floor\",\n                            current_temp,\n                            ACTIVE_ZONE_MIN_TEMP,\n                            ACTIVE_ZONE_MAX_TEMP);\n    }\n\n    return wants;\n}\n\nfunction controlBasement()\n{\n    // The basement is a little easier than the main floor.\n    //\n    // 1. During the weekdays, it is active from 08:00 to\n    //    22:00, and empty otherwise.\n    //\n    // 2. During the wekeends, it is only active from 18:30\n    //    to 22:00 (between dinner and bed).\n    //\n    // The idea here is that we're working or doing school\n    // on weekdays and likely doing something useful on\n    // weekends - especially in summer. Weekends in winter\n    // are hit or miss - maybe we're down here, maybe we're\n    // out. Leave it cold and we'll start the wood stove or \n    // manually turn it up.\n    //\n    // However, Liz is the first one down in the morning on\n    // weekdays, so make sure her office is a comfortable\n    // temperature - everything else will follow.\n    //\n    // For all other times, just use the main area.\n\n    var current_temp = getTempOrAverage(\n                           \"main.basement\",\n                           \"basement\");\n\n    var wants = getWant(\"basement\",\n                        current_temp,\n                        EMPTY_ZONE_MIN_TEMP,\n                        EMPTY_ZONE_MAX_TEMP);\n                    \n    if (isWeekday()) {\n        // weekday logic\n        // Our active hours are between 8AM and 10PM.\n        if (now.getHours() >= 8 && now.getHours() < 22) {\n            // If it's between 8AM (checked above) and\n            // 6PM (checked here), use Liz's office as\n            // primary.\n            if (now.getHours() < 18) {\n                current_temp = getTempOrAverage(\n                                    \"lizs-office.basement\",\n                                    \"basement\");\n            }\n            // else, use the main sensor, which is already\n            // accounted for.\n            \n            // Logic is the same, only the sensor is\n            // different.\n            wants = getWant(\"basement\",\n                            current_temp,\n                            ACTIVE_ZONE_MIN_TEMP,\n                            ACTIVE_ZONE_MAX_TEMP);\n        }\n    }\n    else {\n        // weekend logic\n        if (((now.getHours() >= 18 &&\n                    now.getMinutes() >= 30) ||\n                now.getHours() >= 19) &&\n                now.getHours() < 22) {\n            wants = getWant(\"basement\",\n                            current_temp,\n                            ACTIVE_ZONE_MIN_TEMP,\n                            ACTIVE_ZONE_MAX_TEMP);\n        }\n    }\n\n    return wants;\n}\n\n// main part of the code; calls functions above\n\nvar upstairs_wants = IDLE;\nvar main_floor_wants = IDLE;\nvar basement_wants = IDLE;\nvar min;\nvar max;\n\n// Handle vacation mode\nif (vacation_mode.enabled) {\n    upstairs_wants = getWant(\"upstairs\",\n                              averages.get(\"upstairs\"),\n                              vacation_mode.min_temp,\n                              vacation_mode.max_temp);\n\n    main_floor_wants = getWant(\"main-floor\",\n                               averages.get(\"main-floor\"),\n                               vacation_mode.min_temp,\n                               vacation_mode.max_temp);\n                              \n    basement_wants = getWant(\"basement\",\n                              averages.get(\"basement\"),\n                              vacation_mode.min_temp,\n                              vacation_mode.max_temp);    \n}\nelse if (all_fan_mode.enabled) {\n    // ignore all temperatures, just run fan\n    upstairs_wants = FAN;\n    main_floor_wants = FAN;\n    basement_wants = FAN;\n}\nelse {\n    // No vacation mode, handle override or default control\n    // logic for each zone.\n    \n    if (overrides.get(\"upstairs\").enabled) {\n        // Our acceptable range is our setpoint +/- DEVIATION.\n        min = overrides.get(\"upstairs\").temp - DEVIATION;\n        max = overrides.get(\"upstairs\").temp + DEVIATION;\n        upstairs_wants = getWant(\"upstairs\",\n                                 averages.get(\"upstairs\"),\n                                 min,\n                                 max);\n                                 \n\n    }\n    else {\n        upstairs_wants = controlUpstairs();\n    }\n    \n    if (overrides.get(\"main-floor\").enabled) {\n        // Our acceptable range is our setpoint +/- DEVIATION.\n        min = overrides.get(\"main-floor\").temp - DEVIATION;\n        max = overrides.get(\"main-floor\").temp + DEVIATION;\n        main_floor_wants = getWant(\"main-floor\",\n                                   averages.get(\"main-floor\"),\n                                   min,\n                                   max);\n    }\n    else {\n        main_floor_wants = controlMainFloor();\n    }\n    \n    if (overrides.get(\"basement\").enabled) {\n        // Our acceptable range is our setpoint +/- DEVIATION.\n        min = overrides.get(\"basement\").temp - DEVIATION;\n        max = overrides.get(\"basement\").temp + DEVIATION;\n        basement_wants = getWant(\"basement\",\n                                   averages.get(\"basement\"),\n                                   min,\n                                   max);\n    }\n    else {\n        basement_wants = controlBasement();\n    }\n}\n\nvar bonkers_email;\nvar bonkers_mode_started = global.get(\"bonkers_mode_started\");\n\n// safety fallback - if anything is bonkers, log it and\n// fall back to \"don't freeze the pipes\" mode\nif (upstairs_wants == BONKERS ||\n    main_floor_wants == BONKERS ||\n    basement_wants == BONKERS) {\n        \n    bonkers_email = {};\n\n    if (bonkers_mode_started == 0) {\n\n        // entering bonkers mode\n    \n        global.set(\"bonkers_mode_started\", timestamp);\n    \n        // start by kicking everything to fan\n        upstairs_wants = FAN;\n        main_floor_wants = FAN;\n        basement_wants = FAN;\n    \n        bonkers_email.topic = \"DANGER - THERMOSTAT STARTING BONKERS MODE\";    \n        bonkers_email.payload = \"The thermostat system has an \" +\n                        \"insufficient number of valid \" +\n                        \"temperature readings and \" +\n                        \"has therefore fallen back to \" +\n                        \"BONKERS MODE.\\n\\n\" +\n                        \"Change some batteries, buddy!\\n\\n\" +\n                        \"Current BONKERS action is fan.\";\n    }\n    else {\n        if (timestamp - bonkers_mode_started < \n                BONKERS_MODE_FAN_TIME) {\n                    \n            // Fan hasn't circulated enough, continue\n            // fan circulation.\n            upstairs_wants = FAN;\n            main_floor_wants = FAN;\n            basement_wants = FAN;\n\n            bonkers_email.topic = \"DANGER - THERMOSTAT CONTINUING BONKERS MODE\";    \n            bonkers_email.payload = \"The thermostat system is \" +\n                            \"continuing in BONKERS MODE\" +\n                            \"\\n\\n\" +\n                            \"Current BONKERS action is fan.\";\n        }\n        else {\n            // Fan has run for long enough; check our\n            // local temperature and act accordingly.\n            if (global.get(\"local_temp\") <\n                    BONKERS_MODE_MIN_TEMP) {\n                // Temp too low. Kick on the heat so the\n                // pipes don't freeze.\n                upstairs_wants = HEAT;\n                main_floor_wants = HEAT;\n                basement_wants = HEAT;\n                bonkers_email.topic = \"DANGER - THERMOSTAT CONTINUING BONKERS MODE\";    \n                bonkers_email.payload = \"The thermostat system is \" +\n                                \"continuing in BONKERS MODE\" +\n                                \"\\n\\n\" +\n                                \"Current BONKERS action is heat.\";\n            }\n            else {\n                // We're still in bonkers mode, but are warm\n                // enough to do nothing, so we can turn\n                // the fan and heat off.\n                // Note that we really don't care if it gets\n                // too hot in the summer time, so we'll never\n                // try to cool it in this mode.\n                upstairs_wants = IDLE;\n                main_floor_wants = IDLE;\n                basement_wants = IDLE;\n                \n                // if we're now warm enough, we can end bonkers\n                // mode.\n                global.set(\"bonkers_mode_started\", 0);\n                \n                bonkers_email.topic = \"DANGER - THERMOSTAT IDLING IN BONKERS MODE\";\n                bonkers_email.payload = \"BONKERS MODE is active, \" +\n                                \"but it is warm enough, so \" +\n                                \"we're okay... for now.\";\n            }\n        }\n    }\n}\nelse if (bonkers_mode_started != 0) { \n    // if it had been running, sound the all clear\n\n    bonkers_email = {};\n    bonkers_email.topic = \"SAFE - THERMOSTAT LEAVING BONKERS MODE\";\n    bonkers_email.payload = \"BONKERS MODE has been resolved via \" +\n                            \"sufficient sensor data.\";\n\n    // not in bonkers mode, make sure it is clear.\n    global.set(\"bonkers_mode_started\", 0);\n}\n\n// sanity cross check - make sure that nothing is\n// calling for both heat and cooling. If so, heat trumps\n// cooling (because pipes can freeze), so downgrade cooling\n// to nothing and complain.\nif (upstairs_wants == COOL &&\n    (main_floor_wants == HEAT || basement_wants == HEAT)) {\n    node.warn(\"Upstairs wants cool, but something else \" +\n              \"wants heat. Downgrading\");\n    upstairs_wants = IDLE;       \n}\n\nif (main_floor_wants == COOL &&\n    (upstairs_wants == HEAT || basement_wants == HEAT)) {\n    node.warn(\"Main floor wants cool, but something else \" +\n              \"wants heat. Downgrading\");\n    upstairs_wants = IDLE;       \n}\n\nif (basement_wants == COOL &&\n    (main_floor_wants == HEAT || upstairs_wants == HEAT)) {\n    node.warn(\"Basement wants cool, but something else \" +\n              \"wants heat. Downgrading\");\n    upstairs_wants = IDLE;       \n}\n\n// Fan check - at the end of all the above, if a zone would\n// be IDLE, but the manual fan is enabled, we actually want\n// fan. Note that this only applies when idle, because fan\n// does not trump heating and cooling calls.\n\nif (upstairs_wants == IDLE &&\n    fans.get(\"upstairs\").enabled) {\n    upstairs_wants = FAN;\n}\n\nif (main_floor_wants == IDLE &&\n    fans.get(\"main-floor\").enabled) {\n    main_floor_wants = FAN;\n}\n\nif (basement_wants == IDLE &&\n    fans.get(\"basement\").enabled) {\n    basement_wants = FAN;\n}\n\n// send everything out\nvar upstairs = {};\nupstairs.topic = \"upstairs\";\nupstairs.timestamp = timestamp;\nupstairs.payload = upstairs_wants;\n\nvar main_floor = {};\nmain_floor.topic = \"main-floor\";\nmain_floor.timestamp = timestamp;\nmain_floor.payload = main_floor_wants;\n\nvar basement = {};\nbasement.topic = \"basement\";\nbasement.timestamp = timestamp;\nbasement.payload = basement_wants;\n\n// Save our stats - we'll process these later\nstats = {\n    upstairs: upstairs_wants,\n    main_floor: main_floor_wants,\n    basement: basement_wants,\n    };\nstatistics = global.get(\"statistics\");\nstatistics.set(timestamp, stats);\nglobal.set(\"statistics\", statistics);\n\nreturn [upstairs, main_floor, basement, bonkers_email];","outputs":4,"noerr":0,"initialize":"","finalize":"","libs":[],"x":430,"y":2640,"wires":[["f3bf24a0.d82f58","70540f4d.5ab51","f00e3052.76121"],["e8c2fbbb.9a84e","70540f4d.5ab51","89e3670e.0f9808"],["4f4c1bc5.828434","70540f4d.5ab51","9147075c.d910d8"],["e2fbe071.c4836"]]},{"id":"88cc8dec.d06b98","type":"exec","z":"c956f6e4.937a7","g":"806a61f0.233fe8","command":"/home/matt/bin/read_local_temp","addpay":"","append":"","useSpawn":"false","timer":"","winHide":false,"oldrc":false,"name":"Check local temperature probe","x":170,"y":420,"wires":[["d5d17202.e64bd8"],[],[]]},{"id":"2e9f7768.ef571","type":"inject","z":"c956f6e4.937a7","g":"c70645bc.12b098","name":"Zero dead sensors trigger","props":[{"p":"payload"}],"repeat":"5","crontab":"","once":false,"onceDelay":"5","topic":"","payload":"","payloadType":"date","x":180,"y":240,"wires":[["f95fa61b.8b47d"]]},{"id":"f95fa61b.8b47d","type":"function","z":"c956f6e4.937a7","g":"c70645bc.12b098","name":"Generate messages to zero dead sensors","func":"// timestamp was generated by the trigger and is the standard\n// JavaScript timestamp - that is, milliseconds since the epoch.\nvar timestamp = msg.payload;\n\nvar temps = global.get(\"temps\");\n\nconst TOO_LONG = global.get(\"TOO_LONG\");\n\ntemps.forEach(function(value, key) {\n    if (timestamp - value.last_updated >= TOO_LONG) {\n        msg.timestamp = timestamp;\n        msg.topic = key;\n        msg.payload = 0.0;\n        node.send(msg);\n    }\n});\n\nreturn;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":480,"y":240,"wires":[["0d3dbb7b47322fc0"]]},{"id":"ba3f4e3b.614968","type":"ui_numeric","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"Upstairs set temp","label":"Set Temp","tooltip":"Set the desired temperature","group":"33581fd97c491de8","order":5,"width":0,"height":0,"wrap":false,"passthru":true,"topic":"upstairs","topicType":"str","format":"{{msg.payload}}","min":"50","max":"80","step":1,"className":"","x":750,"y":1740,"wires":[["b9748175.497f8"]]},{"id":"a504825a.7a9f38","type":"ui_switch","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"Upstairs temp override","label":"Override - set temp below","tooltip":"Enable this to use the desired temperature","group":"33581fd97c491de8","order":4,"width":0,"height":0,"passthru":true,"decouple":"false","topic":"upstairs","topicType":"str","style":"","onvalue":"true","onvalueType":"bool","onicon":"","oncolor":"","offvalue":"false","offvalueType":"bool","officon":"","offcolor":"","animate":false,"className":"","x":760,"y":1680,"wires":[["defacd35.886a18"]]},{"id":"1f7817a1.bdbfa","type":"inject","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"Reset temp overrides (midnight)","props":[{"p":"timestamp","v":"","vt":"date"},{"p":"payload"}],"repeat":"","crontab":"01 00 * * *","once":false,"onceDelay":0.1,"topic":"","payload":"false","payloadType":"bool","x":200,"y":1780,"wires":[["a504825a.7a9f38","a21621c4.2e9648","103585dc.c53ad2","47cfe70b.a0faa8","646d0fda.b1ce58","c1bc4ca4.953968","50c741b691c09e3c"]]},{"id":"ff4e229e.bc832","type":"inject","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"Initial override state set","props":[{"p":"payload"}],"repeat":"","crontab":"","once":true,"onceDelay":"5","topic":"","payload":"","payloadType":"date","x":170,"y":1740,"wires":[["7e2d98f1.8a492","ac2fe258.125e3","cde3d281.f7ea18","9e1f60eb.74db08"]]},{"id":"f87d2ec7.593458","type":"function","z":"c956f6e4.937a7","g":"bf1e0396.a5cbf","name":"Get current overrides data","func":"msg.payload = JSON.stringify(\n        Array.from(global.get(\"overrides\").entries()));\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":430,"y":1080,"wires":[["bd74f35a.0e0ae"]]},{"id":"bd74f35a.0e0ae","type":"file","z":"c956f6e4.937a7","g":"bf1e0396.a5cbf","name":"Write overrides to file","filename":"overrides","appendNewline":false,"createDir":false,"overwriteFile":"true","encoding":"none","x":680,"y":1080,"wires":[[]]},{"id":"4bb592c9.eb816c","type":"file in","z":"c956f6e4.937a7","g":"115c57c2.c40e3","name":"Read overrides from file","filename":"overrides","format":"utf8","chunk":false,"sendError":false,"encoding":"none","x":410,"y":1260,"wires":[["63851ce2.7bd70c"]]},{"id":"63851ce2.7bd70c","type":"function","z":"c956f6e4.937a7","g":"115c57c2.c40e3","name":"Parse overrides data from file and store in context","func":"overrides = new Map(JSON.parse(msg.payload));\n\nglobal.set(\"overrides\", overrides);\n\nreturn;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":750,"y":1260,"wires":[[]]},{"id":"cf22f8fe.1de7f8","type":"inject","z":"c956f6e4.937a7","g":"115c57c2.c40e3","name":"Data load trigger","props":[{"p":"payload"}],"repeat":"","crontab":"","once":true,"onceDelay":"0.1","topic":"","payload":"","payloadType":"date","x":150,"y":1300,"wires":[["4bb592c9.eb816c","a18ea1f0.c2b33","5ad4dabedcf4ba84"]]},{"id":"c78e8fbc.a8d4c8","type":"inject","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"Reset temp overrides (noon)","props":[{"p":"timestamp","v":"","vt":"date"},{"p":"payload"}],"repeat":"","crontab":"00 12 * * *","once":false,"onceDelay":0.1,"topic":"","payload":"false","payloadType":"bool","x":210,"y":1820,"wires":[["a504825a.7a9f38","a21621c4.2e9648","103585dc.c53ad2","47cfe70b.a0faa8","646d0fda.b1ce58","c1bc4ca4.953968"]]},{"id":"95588cef.ab4c6","type":"ui_numeric","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"Main floor set temp","label":"Set Temp","tooltip":"Set the desired temperature","group":"2c421088.8015b","order":5,"width":0,"height":0,"wrap":false,"passthru":true,"topic":"main-floor","topicType":"str","format":"{{msg.payload}}","min":"50","max":"80","step":1,"className":"","x":750,"y":1920,"wires":[["bc8fcb69.27d2f"]]},{"id":"a21621c4.2e9648","type":"ui_switch","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"Main floor temp override","label":"Override - set temp below","tooltip":"Enable this to use the desired temperature","group":"2c421088.8015b","order":4,"width":0,"height":0,"passthru":true,"decouple":"false","topic":"main-floor","topicType":"str","style":"","onvalue":"true","onvalueType":"bool","onicon":"","oncolor":"","offvalue":"false","offvalueType":"bool","officon":"","offcolor":"","animate":false,"className":"","x":770,"y":1860,"wires":[["488a08a1.06b218"]]},{"id":"cf15512a.fa0dd","type":"ui_numeric","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"Basement set temp","label":"Set Temp","tooltip":"Set the desired temperature","group":"b88f3265.acdf3","order":5,"width":0,"height":0,"wrap":false,"passthru":true,"topic":"basement","topicType":"str","format":"{{msg.payload}}","min":"50","max":"80","step":1,"className":"","x":750,"y":2100,"wires":[["b2fa7655.668148"]]},{"id":"103585dc.c53ad2","type":"ui_switch","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"Basement temp override","label":"Override - set temp below","tooltip":"Enable this to use the desired temperature","group":"b88f3265.acdf3","order":4,"width":0,"height":0,"passthru":true,"decouple":"false","topic":"basement","topicType":"str","style":"","onvalue":"true","onvalueType":"bool","onicon":"","oncolor":"","offvalue":"false","offvalueType":"bool","officon":"","offcolor":"","animate":false,"className":"","x":770,"y":2040,"wires":[["4b8d813.4e865"]]},{"id":"ebfec5be.446cc","type":"ui_text","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","group":"33581fd97c491de8","order":6,"width":6,"height":"1","name":"Upstairs temp text","label":"","format":"{{msg.payload}}","layout":"col-center","className":"","x":1270,"y":1740,"wires":[]},{"id":"6f458509.0f286c","type":"ui_text","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","group":"2c421088.8015b","order":6,"width":6,"height":"1","name":"Main floor temp text","label":"","format":"{{msg.payload}}","layout":"col-center","className":"","x":1270,"y":1920,"wires":[]},{"id":"373ee7ea.5da728","type":"ui_text","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","group":"b88f3265.acdf3","order":6,"width":6,"height":"1","name":"Basement temp text","label":"","format":"{{msg.payload}}","layout":"col-center","className":"","x":1280,"y":2100,"wires":[]},{"id":"a9732bd9.a28f2","type":"subflow:9f9a87f3.ed673","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"","x":1260,"y":1680,"wires":[["ebfec5be.446cc","a30c441d.604788"]]},{"id":"b1cdf0c8.de86d8","type":"subflow:9f9a87f3.ed673","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"","x":1260,"y":1860,"wires":[["6f458509.0f286c","a30c441d.604788"]]},{"id":"f5ec44eb.fcbcf","type":"subflow:9f9a87f3.ed673","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"","x":1280,"y":2040,"wires":[["373ee7ea.5da728","a30c441d.604788"]]},{"id":"defacd35.886a18","type":"subflow:8ddbcca0.232738","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"","x":1020,"y":1680,"wires":[["a9732bd9.a28f2"]]},{"id":"488a08a1.06b218","type":"subflow:8ddbcca0.232738","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"","x":1020,"y":1860,"wires":[["b1cdf0c8.de86d8"]]},{"id":"4b8d813.4e865","type":"subflow:8ddbcca0.232738","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"","env":[],"x":1020,"y":2040,"wires":[["f5ec44eb.fcbcf"]]},{"id":"b9748175.497f8","type":"subflow:8953881b.c1486","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"","x":1010,"y":1740,"wires":[["a9732bd9.a28f2"]]},{"id":"bc8fcb69.27d2f","type":"subflow:8953881b.c1486","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"","x":1010,"y":1920,"wires":[["b1cdf0c8.de86d8"]]},{"id":"b2fa7655.668148","type":"subflow:8953881b.c1486","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"","x":1010,"y":2100,"wires":[["f5ec44eb.fcbcf"]]},{"id":"5fd32387.e9d32c","type":"subflow:ec5047e5.1fe1d","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"","env":[],"x":430,"y":1580,"wires":[["a504825a.7a9f38"],["ba3f4e3b.614968"],["c1bc4ca4.953968"]]},{"id":"5f6d1b3c.31206c","type":"subflow:ec5047e5.1fe1d","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"","x":430,"y":1640,"wires":[["a21621c4.2e9648"],["95588cef.ab4c6"],["646d0fda.b1ce58"]]},{"id":"f49a56e2.646b4","type":"subflow:ec5047e5.1fe1d","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"","x":430,"y":1700,"wires":[["103585dc.c53ad2"],["cf15512a.fa0dd"],["47cfe70b.a0faa8"]]},{"id":"7e2d98f1.8a492","type":"change","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"Set topic to upstairs","rules":[{"t":"set","p":"topic","pt":"msg","to":"upstairs","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":230,"y":1600,"wires":[["5fd32387.e9d32c"]]},{"id":"ac2fe258.125e3","type":"change","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"Set topic to main-floor","rules":[{"t":"set","p":"topic","pt":"msg","to":"main-floor","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":220,"y":1640,"wires":[["5f6d1b3c.31206c"]]},{"id":"cde3d281.f7ea18","type":"change","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"Set topic to basement","rules":[{"t":"set","p":"topic","pt":"msg","to":"basement","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":220,"y":1680,"wires":[["f49a56e2.646b4"]]},{"id":"8dfd4695.ef4ec","type":"function","z":"c956f6e4.937a7","g":"d2f05012.6300e8","name":"Super low temp check","func":"var temps = global.get(\"temps\");\n\nconst TOO_LONG = global.get(\"TOO_LONG\");\nconst TOO_LOW_TEMP = global.get(\"TOO_LOW_TEMP\");\n\nvar timestamp = msg.timestamp;\n\nvar too_cold = [];\n\ntemps.forEach(function(value, key) {\n    if (timestamp - value.last_updated < TOO_LONG &&\n        value.temp < TOO_LOW_TEMP) {\n        too_cold.push(key);\n    }\n});\n\nif (too_cold.length > 0) {\n    msg.topic = \"WARNING - It's too cold!!!!\";\n    msg.payload = \"DANGER\\n\\n\" +\n                  \"The following sensors are reporting \" +\n                  \"dangerously low temperature values:\\n\\n\";\n    too_cold.forEach(function(value) {\n        msg.payload += value + \"\\n\";\n    });\n    node.send(msg);\n}\n\nreturn;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":220,"y":2780,"wires":[["68fd81b4.0b2e2"]]},{"id":"68fd81b4.0b2e2","type":"e-mail","z":"c956f6e4.937a7","g":"d2f05012.6300e8","server":"mail.domain.net","port":"25","secure":false,"tls":false,"name":"email@domain.net","dname":"Too cold email","x":420,"y":2780,"wires":[]},{"id":"9dc7864c.f2a288","type":"ui_switch","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"","label":"Enable vacation mode","tooltip":"","group":"a7684798.a5ef","order":3,"width":0,"height":0,"passthru":true,"decouple":"false","topic":"enabled","topicType":"str","style":"","onvalue":"true","onvalueType":"bool","onicon":"","oncolor":"","offvalue":"false","offvalueType":"bool","officon":"","offcolor":"","animate":false,"className":"","x":340,"y":2040,"wires":[["6bb41edf.6709c"]]},{"id":"6bb41edf.6709c","type":"function","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"Vacation mode state storage","func":"var vacation_mode = global.get(\"vacation_mode\");\n\n// parse and store message\nif (msg.topic == \"enabled\") {\n    vacation_mode.enabled = msg.payload;    \n}\nelse if (msg.topic == \"min_temp\") {\n    vacation_mode.min_temp = msg.payload;\n}\nelse if (msg.topic == \"max_temp\") {\n    vacation_mode.max_temp = msg.payload;\n}\nglobal.set(\"vacation_mode\", vacation_mode);\n\n// set UI text\nif (vacation_mode.enabled) {\n    msg.payload = \"The temperature will be kept between \" + \n                  vacation_mode.min_temp + \" and \" +\n                  vacation_mode.max_temp + \" until disabled.\";\n}\nelse {\n    msg.payload = \"The temperature will be automatically controlled.\";\n}\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":780,"y":2160,"wires":[["838b4d2.590023","a30c441d.604788"]]},{"id":"838b4d2.590023","type":"ui_text","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","group":"a7684798.a5ef","order":6,"width":6,"height":2,"name":"Vacation mode temp text","label":"","format":"{{msg.payload}}","layout":"col-center","className":"","x":1050,"y":2160,"wires":[]},{"id":"2e3f4cc7.82c584","type":"file","z":"c956f6e4.937a7","g":"bf1e0396.a5cbf","name":"Write vacation_mode to file","filename":"vacation_mode","appendNewline":false,"createDir":false,"overwriteFile":"true","encoding":"none","x":700,"y":1120,"wires":[[]]},{"id":"fb33fae7.41b9f","type":"function","z":"c956f6e4.937a7","g":"bf1e0396.a5cbf","name":"Get current vacation mode data","func":"msg.payload = JSON.stringify(\n        global.get(\"vacation_mode\"));\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":430,"y":1120,"wires":[["2e3f4cc7.82c584"]]},{"id":"4b2dcdc1.388be4","type":"function","z":"c956f6e4.937a7","g":"115c57c2.c40e3","name":"Parse vacation_mode data from file and store in context","func":"vacation_mode = JSON.parse(msg.payload);\n\nglobal.set(\"vacation_mode\", vacation_mode);\n\nreturn;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":770,"y":1300,"wires":[[]]},{"id":"a18ea1f0.c2b33","type":"file in","z":"c956f6e4.937a7","g":"115c57c2.c40e3","name":"Read vacation_mode from file","filename":"vacation_mode","format":"utf8","chunk":false,"sendError":false,"encoding":"none","x":410,"y":1300,"wires":[["4b2dcdc1.388be4"]]},{"id":"9e1f60eb.74db08","type":"function","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"Temp UI set","func":"var vacation_mode = global.get(\"vacation_mode\");\n\nvar enabled = {};\nenabled.payload = vacation_mode.enabled;\n\nvar min = {};\nmin.payload = vacation_mode.min_temp;\n\nvar max = {};\nmax.payload = vacation_mode.max_temp;\n\nreturn [enabled, min, max];","outputs":3,"noerr":0,"initialize":"","finalize":"","libs":[],"x":130,"y":2100,"wires":[["9dc7864c.f2a288"],["ecaf1da2.277c18"],["467fb4c1.d5027c"]]},{"id":"c65e1760.9fcb08","type":"inject","z":"c956f6e4.937a7","g":"806a61f0.233fe8","name":"Local temp check injector","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"60","crontab":"","once":true,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":180,"y":360,"wires":[["88cc8dec.d06b98"]]},{"id":"d5d17202.e64bd8","type":"function","z":"c956f6e4.937a7","g":"806a61f0.233fe8","name":"Save local temp and generate log message","func":"// we get the temp as a string with a newline after it.\n// strip out all whitespace, and convert to float\nmsg.payload = +(msg.payload.replace(/\\s+/g, ''));\n\nglobal.set(\"local_temp\", msg.payload);\n\nmsg.topic = \"local_plenum_sensor\";\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":510,"y":400,"wires":[["c20d5ce4.b35a2","f277df24.a247d","f100e952.e3311"]]},{"id":"e2fbe071.c4836","type":"e-mail","z":"c956f6e4.937a7","g":"d2f05012.6300e8","server":"mail.domain.net","port":"25","secure":false,"tls":false,"name":"email@domain.net","dname":"Bonkers mode email","x":680,"y":2800,"wires":[]},{"id":"2020ef06.213308","type":"rpi-gpio out","z":"c956f6e4.937a7","g":"d2f05012.6300e8","name":"Upstairs heat","pin":"23","set":true,"level":"0","freq":"","out":"out","bcm":true,"x":1290,"y":2380,"wires":[]},{"id":"f3bf24a0.d82f58","type":"subflow:135e86d8.5c99a1","z":"c956f6e4.937a7","g":"d2f05012.6300e8","name":"Upstairs want to GPIO mapper","env":[],"x":1030,"y":2440,"wires":[["2020ef06.213308","1089ff6e.f1f6b9"],["abe124e7.a1159","1089ff6e.f1f6b9"],["87b1c475.6bec68","1089ff6e.f1f6b9"]]},{"id":"e8c2fbbb.9a84e","type":"subflow:135e86d8.5c99a1","z":"c956f6e4.937a7","g":"d2f05012.6300e8","name":"Main floor want to GPIO mapper","env":[],"x":1030,"y":2620,"wires":[["fc2f9098.6a1dc8","36960c72.018944"],["43eeb6fc.92a1b8","36960c72.018944"],["fb0ab8d.f89b448","36960c72.018944"]]},{"id":"4f4c1bc5.828434","type":"subflow:135e86d8.5c99a1","z":"c956f6e4.937a7","g":"d2f05012.6300e8","name":"Basement want to GPIO mapper","env":[],"x":1030,"y":2800,"wires":[["36e0ed6b.68d4da","38cf3fd.01878c"],["3cba66b6.9dc33a","38cf3fd.01878c"],["3218709b.b74dd","38cf3fd.01878c"]]},{"id":"abe124e7.a1159","type":"rpi-gpio out","z":"c956f6e4.937a7","g":"d2f05012.6300e8","name":"Upstairs cool","pin":"22","set":true,"level":"0","freq":"","out":"out","bcm":true,"x":1290,"y":2440,"wires":[]},{"id":"87b1c475.6bec68","type":"rpi-gpio out","z":"c956f6e4.937a7","g":"d2f05012.6300e8","name":"Upstairs fan","pin":"4","set":true,"level":"0","freq":"","out":"out","bcm":true,"x":1290,"y":2500,"wires":[]},{"id":"fb0ab8d.f89b448","type":"rpi-gpio out","z":"c956f6e4.937a7","g":"d2f05012.6300e8","name":"Main floor fan","pin":"13","set":true,"level":"0","freq":"","out":"out","bcm":true,"x":1300,"y":2680,"wires":[]},{"id":"43eeb6fc.92a1b8","type":"rpi-gpio out","z":"c956f6e4.937a7","g":"d2f05012.6300e8","name":"Main floor cool","pin":"21","set":true,"level":"0","freq":"","out":"out","bcm":true,"x":1300,"y":2620,"wires":[]},{"id":"fc2f9098.6a1dc8","type":"rpi-gpio out","z":"c956f6e4.937a7","g":"d2f05012.6300e8","name":"Main floor heat","pin":"27","set":true,"level":"0","freq":"","out":"out","bcm":true,"x":1300,"y":2560,"wires":[]},{"id":"3218709b.b74dd","type":"rpi-gpio out","z":"c956f6e4.937a7","g":"d2f05012.6300e8","name":"Basement fan","pin":"19","set":true,"level":"0","freq":"","out":"out","bcm":true,"x":1300,"y":2860,"wires":[]},{"id":"3cba66b6.9dc33a","type":"rpi-gpio out","z":"c956f6e4.937a7","g":"d2f05012.6300e8","name":"Basement cool","pin":"20","set":true,"level":"0","freq":"","out":"out","bcm":true,"x":1300,"y":2800,"wires":[]},{"id":"36e0ed6b.68d4da","type":"rpi-gpio out","z":"c956f6e4.937a7","g":"d2f05012.6300e8","name":"Basement heat","pin":"12","set":true,"level":"0","freq":"","out":"out","bcm":true,"x":1300,"y":2740,"wires":[]},{"id":"70540f4d.5ab51","type":"flogger","z":"c956f6e4.937a7","g":"d2f05012.6300e8","name":"Logic log","logfile":"logic.log","inputchoice":"moustache","inputobject":"payload","inputobjectType":"msg","inputmoustache":"Zone {{topic}} set to {{payload}}.","loglevel":"INFO","logconfig":"7a8578cd.e0755","sendpane":true,"x":640,"y":2480,"wires":[[]]},{"id":"9b1b4114.9ab368","type":"flogger","z":"c956f6e4.937a7","g":"9d1fcef.684b7b","name":"Missing sensors logger","logfile":"missing_sensors.log","inputchoice":"object","inputobject":"payload","inputobjectType":"msg","inputmoustache":"{{payload}}","loglevel":"INFO","logconfig":"7a8578cd.e0755","sendpane":true,"x":800,"y":1480,"wires":[[]]},{"id":"f00e3052.76121","type":"ui_text","z":"c956f6e4.937a7","g":"d2f05012.6300e8","group":"33581fd97c491de8","order":7,"width":0,"height":0,"name":"Upstairs status","label":"Currently","format":"{{msg.payload}}","layout":"col-center","className":"","x":980,"y":2500,"wires":[]},{"id":"89e3670e.0f9808","type":"ui_text","z":"c956f6e4.937a7","g":"d2f05012.6300e8","group":"2c421088.8015b","order":7,"width":0,"height":0,"name":"Main floor status","label":"Currently","format":"{{msg.payload}}","layout":"col-center","className":"","x":980,"y":2680,"wires":[]},{"id":"9147075c.d910d8","type":"ui_text","z":"c956f6e4.937a7","g":"d2f05012.6300e8","group":"b88f3265.acdf3","order":7,"width":0,"height":0,"name":"Basement call status","label":"Currently","format":"{{msg.payload}}","layout":"col-center","className":"","x":1000,"y":2740,"wires":[]},{"id":"3db5b02.70d71d","type":"inject","z":"c956f6e4.937a7","g":"d2f05012.6300e8","name":"Initial UI set","props":[{"p":"payload"}],"repeat":"","crontab":"","once":true,"onceDelay":0.1,"topic":"","payload":"idle","payloadType":"str","x":790,"y":2580,"wires":[["f00e3052.76121","89e3670e.0f9808","9147075c.d910d8"]]},{"id":"ecaf1da2.277c18","type":"ui_numeric","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"Vacation min temp","label":"Minimum temperature","tooltip":"Minimum acceptable temperature for vacation mode","group":"a7684798.a5ef","order":4,"width":0,"height":0,"wrap":false,"passthru":true,"topic":"min_temp","topicType":"str","format":"{{msg.payload}}","min":"50","max":"80","step":1,"className":"","x":330,"y":2100,"wires":[["6bb41edf.6709c"]]},{"id":"467fb4c1.d5027c","type":"ui_numeric","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"Vacation max temp","label":"Maximum temperature","tooltip":"Maximum acceptable temperature for vacation mode","group":"a7684798.a5ef","order":5,"width":0,"height":0,"wrap":false,"passthru":true,"topic":"max_temp","topicType":"str","format":"{{msg.payload}}","min":"50","max":"80","step":1,"className":"","x":330,"y":2160,"wires":[["6bb41edf.6709c"]]},{"id":"a30c441d.604788","type":"delay","z":"c956f6e4.937a7","g":"d2f05012.6300e8","name":"UI message rate limit","pauseType":"rate","timeout":"5","timeoutUnits":"seconds","rate":"2","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":true,"allowrate":false,"outputs":1,"x":760,"y":2400,"wires":[["523f61bb.ed838"]]},{"id":"523f61bb.ed838","type":"change","z":"c956f6e4.937a7","g":"d2f05012.6300e8","name":"Set timestamp to resulting  message time","rules":[{"t":"set","p":"timestamp","pt":"msg","to":"","tot":"date"}],"action":"","property":"","from":"","to":"","reg":false,"x":260,"y":2480,"wires":[["d52206bc.640af"]]},{"id":"2bd53f4.9cdcac","type":"ui_chart","z":"c956f6e4.937a7","g":"806a61f0.233fe8","name":"","group":"46a15056.f27fe","order":4,"width":0,"height":0,"label":"Plenum Sensor Chart","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","dot":false,"ymin":"50","ymax":"80","removeOlder":"30","removeOlderPoints":"","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"className":"","x":1120,"y":400,"wires":[[]]},{"id":"1089ff6e.f1f6b9","type":"ui_chart","z":"c956f6e4.937a7","g":"5d7cceac.346c48","name":"","group":"7f95db1d.7d6e5c","order":1,"width":0,"height":0,"label":"Upstairs","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","dot":false,"ymin":"0","ymax":"1","removeOlder":"30","removeOlderPoints":"","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#ef2929","#729fcf","#eeeeec","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"className":"","x":1960,"y":2060,"wires":[[]]},{"id":"36960c72.018944","type":"ui_chart","z":"c956f6e4.937a7","g":"5d7cceac.346c48","name":"","group":"7f95db1d.7d6e5c","order":2,"width":0,"height":0,"label":"Main Floor","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","dot":false,"ymin":"0","ymax":"1","removeOlder":"30","removeOlderPoints":"","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#ef2929","#729fcf","#eeeeec","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"className":"","x":1970,"y":2300,"wires":[[]]},{"id":"38cf3fd.01878c","type":"ui_chart","z":"c956f6e4.937a7","g":"5d7cceac.346c48","name":"","group":"7f95db1d.7d6e5c","order":3,"width":0,"height":0,"label":"Basement","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","dot":false,"ymin":"0","ymax":"1","removeOlder":"30","removeOlderPoints":"","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#ef2929","#729fcf","#eeeeec","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"className":"","x":1960,"y":2540,"wires":[[]]},{"id":"fcfebe86.c063f8","type":"inject","z":"c956f6e4.937a7","g":"5d7cceac.346c48","name":"Heat state zero","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":true,"onceDelay":"1","topic":"heat","payload":"0","payloadType":"num","x":1600,"y":2160,"wires":[["1089ff6e.f1f6b9","36960c72.018944","38cf3fd.01878c"]]},{"id":"3af3354e.876b22","type":"inject","z":"c956f6e4.937a7","g":"5d7cceac.346c48","name":"Cool state zero","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":true,"onceDelay":"1.5","topic":"cool","payload":"0","payloadType":"num","x":1600,"y":2240,"wires":[["1089ff6e.f1f6b9","36960c72.018944","38cf3fd.01878c"]]},{"id":"84c40a7a.7a96b8","type":"inject","z":"c956f6e4.937a7","g":"5d7cceac.346c48","name":"Fan state zero","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":true,"onceDelay":"2","topic":"fan","payload":"0","payloadType":"num","x":1600,"y":2420,"wires":[["1089ff6e.f1f6b9","36960c72.018944","38cf3fd.01878c"]]},{"id":"f277df24.a247d","type":"delay","z":"c956f6e4.937a7","g":"806a61f0.233fe8","name":"Plenum sensor rate limit","pauseType":"rate","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"5","rateUnits":"minute","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":true,"outputs":1,"x":850,"y":400,"wires":[["2bd53f4.9cdcac"]]},{"id":"f411c7c.342e1b8","type":"inject","z":"c956f6e4.937a7","g":"d2f05012.6300e8","name":"7AM precision trigger","props":[{"p":"timestamp","v":"","vt":"date"}],"repeat":"","crontab":"00 07 * * *","once":false,"onceDelay":"300","topic":"","x":160,"y":2520,"wires":[["d52206bc.640af"]]},{"id":"27220f7e.7b9fb8","type":"inject","z":"c956f6e4.937a7","g":"d2f05012.6300e8","name":"8AM precision trigger","props":[{"p":"timestamp","v":"","vt":"date"}],"repeat":"","crontab":"00 08 * * *","once":false,"onceDelay":"300","topic":"","x":160,"y":2560,"wires":[["d52206bc.640af"]]},{"id":"a3748100.4d29b8","type":"inject","z":"c956f6e4.937a7","g":"d2f05012.6300e8","name":"Noon precision trigger","props":[{"p":"timestamp","v":"","vt":"date"}],"repeat":"","crontab":"00 12 * * *","once":false,"onceDelay":"300","topic":"","x":170,"y":2600,"wires":[["d52206bc.640af"]]},{"id":"80ba6cb2.201698","type":"inject","z":"c956f6e4.937a7","g":"d2f05012.6300e8","name":"5:45PM precision trigger","props":[{"p":"timestamp","v":"","vt":"date"}],"repeat":"","crontab":"45 17 * * *","once":false,"onceDelay":"300","topic":"","x":170,"y":2640,"wires":[["d52206bc.640af"]]},{"id":"83a7f83b.7e73b8","type":"inject","z":"c956f6e4.937a7","g":"d2f05012.6300e8","name":"6:30PM precision trigger","props":[{"p":"timestamp","v":"","vt":"date"}],"repeat":"","crontab":"30 18 * * *","once":false,"onceDelay":"300","topic":"","x":170,"y":2680,"wires":[["d52206bc.640af"]]},{"id":"a69b4e2b.ceecd8","type":"ui_chart","z":"c956f6e4.937a7","g":"1fa2872e.1bad99","name":"Upstairs Chart","group":"46a15056.f27fe","order":1,"width":0,"height":0,"label":"Upstairs","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","dot":false,"ymin":"50","ymax":"80","removeOlder":"30","removeOlderPoints":"","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"className":"","x":1280,"y":100,"wires":[[]]},{"id":"1a6e305.5f2785","type":"ui_chart","z":"c956f6e4.937a7","g":"1fa2872e.1bad99","name":"Main Floor Chart","group":"46a15056.f27fe","order":2,"width":0,"height":0,"label":"Main Floor","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","dot":false,"ymin":"50","ymax":"80","removeOlder":"30","removeOlderPoints":"","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"className":"","x":1290,"y":180,"wires":[[]]},{"id":"d9cb9b2b.9129c","type":"ui_chart","z":"c956f6e4.937a7","g":"1fa2872e.1bad99","name":"Basement Chart","group":"46a15056.f27fe","order":3,"width":0,"height":0,"label":"Basement","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","dot":false,"ymin":"50","ymax":"80","removeOlder":"30","removeOlderPoints":"","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"className":"","x":1280,"y":260,"wires":[[]]},{"id":"8b0e9716.0c6a","type":"inject","z":"c956f6e4.937a7","name":"Periodic averaging trigger","props":[{"p":"timestamp","v":"","vt":"date"}],"repeat":"300","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":240,"y":900,"wires":[["217babd9.8c62c4","49cdecea.aa7f44","85bd42f1.5e33b"]]},{"id":"f100e952.e3311","type":"ui_gauge","z":"c956f6e4.937a7","g":"806a61f0.233fe8","name":"","group":"524013df.74cabc","order":3,"width":0,"height":0,"gtype":"gage","title":"Return Air Plenum","label":"F","format":"{{value}}","min":"40","max":"80","colors":["#729fcf","#8ae234","#cc0000"],"seg1":"60","seg2":"70","className":"","x":830,"y":360,"wires":[]},{"id":"47cfe70b.a0faa8","type":"ui_switch","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"Basement fan ","label":"Run fan","tooltip":"Enable this to manually run the fan","group":"b88f3265.acdf3","order":2,"width":0,"height":0,"passthru":true,"decouple":"false","topic":"basement","topicType":"str","style":"","onvalue":"true","onvalueType":"bool","onicon":"","oncolor":"","offvalue":"false","offvalueType":"bool","officon":"","offcolor":"","animate":false,"className":"","x":740,"y":1980,"wires":[["c45d7357.ce6328"]]},{"id":"c45d7357.ce6328","type":"subflow:8c7b36e3.309c68","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"","x":920,"y":1980,"wires":[["83f721db.9c53b"]]},{"id":"83f721db.9c53b","type":"subflow:a9211c68.6381c","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"","x":1110,"y":1980,"wires":[["d76acf7e.43ad4","a30c441d.604788"]]},{"id":"d76acf7e.43ad4","type":"ui_text","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","group":"b88f3265.acdf3","order":3,"width":6,"height":"1","name":"Basement fan text","label":"","format":"{{msg.payload}}","layout":"col-center","className":"","x":1330,"y":1980,"wires":[]},{"id":"646d0fda.b1ce58","type":"ui_switch","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"Main floor fan","label":"Run fan","tooltip":"Enable this to manually run the fan","group":"2c421088.8015b","order":2,"width":0,"height":0,"passthru":true,"decouple":"false","topic":"main-floor","topicType":"str","style":"","onvalue":"true","onvalueType":"bool","onicon":"","oncolor":"","offvalue":"false","offvalueType":"bool","officon":"","offcolor":"","animate":false,"className":"","x":740,"y":1800,"wires":[["5b32b88d.6a02a"]]},{"id":"5b32b88d.6a02a","type":"subflow:8c7b36e3.309c68","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"","x":920,"y":1800,"wires":[["e7aed0e6.1bb228"]]},{"id":"e7aed0e6.1bb228","type":"subflow:a9211c68.6381c","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"","x":1110,"y":1800,"wires":[["5a26f618.b7dc6","a30c441d.604788"]]},{"id":"5a26f618.b7dc6","type":"ui_text","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","group":"2c421088.8015b","order":3,"width":6,"height":"1","name":"Main floor fan text","label":"","format":"{{msg.payload}}","layout":"col-center","className":"","x":1330,"y":1800,"wires":[]},{"id":"c1bc4ca4.953968","type":"ui_switch","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"Upstairs fan ","label":"Run fan","tooltip":"Enable this to manually run the fan","group":"33581fd97c491de8","order":2,"width":0,"height":0,"passthru":true,"decouple":"false","topic":"upstairs","topicType":"str","style":"","onvalue":"true","onvalueType":"bool","onicon":"","oncolor":"","offvalue":"false","offvalueType":"bool","officon":"","offcolor":"","animate":false,"className":"","x":730,"y":1620,"wires":[["f3d93cb1.67bcf"]]},{"id":"f3d93cb1.67bcf","type":"subflow:8c7b36e3.309c68","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"","env":[],"x":900,"y":1620,"wires":[["e7c8d11e.8368b"]]},{"id":"e7c8d11e.8368b","type":"subflow:a9211c68.6381c","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"","env":[],"x":1090,"y":1620,"wires":[["cb439109.4fca2","a30c441d.604788"]]},{"id":"cb439109.4fca2","type":"ui_text","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","group":"33581fd97c491de8","order":3,"width":"6","height":"1","name":"Upstairs fan text","label":"","format":"{{msg.payload}}","layout":"col-center","className":"","x":1300,"y":1620,"wires":[]},{"id":"56fd67d4aa796664","type":"debug","z":"c956f6e4.937a7","g":"6f07d525.5ab154","name":"Debug /test","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":310,"y":720,"wires":[]},{"id":"e21f1be182c2bf3b","type":"coap response","z":"c956f6e4.937a7","g":"6f07d525.5ab154","name":"CoAP reply","statusCode":"","contentFormat":"text/plain","x":890,"y":640,"wires":[]},{"id":"8e37f58cae8182c8","type":"change","z":"c956f6e4.937a7","g":"6f07d525.5ab154","name":"Set payload to response status code","rules":[{"t":"set","p":"payload","pt":"msg","to":"res.statusCode","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":630,"y":640,"wires":[["e21f1be182c2bf3b"]]},{"id":"dc8b891a7684a3f1","type":"coap in","z":"c956f6e4.937a7","g":"6f07d525.5ab154","method":"PUT","name":"","server":"b0eb88d49e33818f","url":"temperatures","x":130,"y":580,"wires":[["13c36e92.2d51e9","8e37f58cae8182c8"]]},{"id":"e153edabf46cde39","type":"coap in","z":"c956f6e4.937a7","g":"6f07d525.5ab154","method":"PUT","name":"","server":"b0eb88d49e33818f","url":"test","x":100,"y":700,"wires":[["56fd67d4aa796664","8e37f58cae8182c8"]]},{"id":"230d11498551f7dc","type":"function","z":"c956f6e4.937a7","g":"bf1e0396.a5cbf","name":"Get current statistics data","func":"msg.payload = JSON.stringify(\n        Array.from(global.get(\"statistics\").entries()));\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":430,"y":1160,"wires":[["d092c9c3f66239e7"]]},{"id":"d092c9c3f66239e7","type":"file","z":"c956f6e4.937a7","g":"bf1e0396.a5cbf","name":"Write statistics to file","filename":"statistics","appendNewline":false,"createDir":false,"overwriteFile":"true","encoding":"none","x":680,"y":1160,"wires":[[]]},{"id":"5ad4dabedcf4ba84","type":"file in","z":"c956f6e4.937a7","g":"115c57c2.c40e3","name":"Read statistics from file","filename":"statistics","format":"utf8","chunk":false,"sendError":false,"encoding":"none","allProps":false,"x":410,"y":1340,"wires":[["20d9f0928fc60d40"]]},{"id":"20d9f0928fc60d40","type":"function","z":"c956f6e4.937a7","g":"115c57c2.c40e3","name":"Parse statistics data from file and store in context","func":"statistics = new Map(JSON.parse(msg.payload));\n\nglobal.set(\"statistics\", statistics);\n\nreturn;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":750,"y":1340,"wires":[[]]},{"id":"48cd9e2e50b3b0f8","type":"function","z":"c956f6e4.937a7","g":"d34ef8a2ae06d8e5","name":"Statistics pruning and calculation","func":"function millisecondsToHours(milliseconds) {\n    // milliseconds = given\n    //       / 1000 = seconds\n    //       /   60 = minutes\n    //       /   60 = hours\n    var hours = milliseconds / 1000 / 60 / 60;\n    \n    // and then round it to 2 decimal places\n    return Math.round((hours + Number.EPSILON) * 100) / 100\n}\n\nvar TOO_OLD = global.get(\"STATISTICS_TOO_OLD\");\nvar now = msg.payload;\n\n// these must be the same as in the Zone Control Logic block\nconst HEAT    = \"heating\";\nconst COOL    = \"cooling\";\nconst FAN     = \"fan on\";\n\n// runtimes are in seconds\nvar runtimes = {\n    upstairs: {\n         fan: 0,\n        heat: 0,\n        cool: 0,\n        },\n    main_floor: {\n         fan: 0,\n        heat: 0,\n        cool: 0,\n        },\n    basement: {\n         fan: 0,\n        heat: 0,\n        cool: 0,\n        },\n    overall: {\n         fan: 0,\n        heat: 0,\n        cool: 0,        \n        },\n    };\n\nvar last_key = 0;\n\nvar statistics = global.get(\"statistics\");\n\nvar sorted_keys = Array.from(statistics.keys()).sort();\n\nsorted_keys.forEach(\n    function (key, index) {\n        if (now - key > TOO_OLD) {\n            // stat too old, delete it\n            statistics.delete(key);\n        }\n        else {\n            // not too old, start counting\n            if (last_key != 0) {\n                // we can do maths\n                var elapsed_time = key - last_key;\n                var overall_fan = 0;\n                var overall_heat = 0;\n                var overall_cool = 0;\n                var last_value = statistics.get(last_key);\n\n                if (last_value.upstairs == HEAT) {\n                    runtimes.upstairs.heat += elapsed_time;\n                    overall_heat++;\n                }\n                else if (last_value.upstairs == COOL) {\n                    runtimes.upstairs.cool += elapsed_time;\n                    overall_cool++;\n                }\n                else if (last_value.upstairs == FAN) {\n                    runtimes.upstairs.fan += elapsed_time;\n                    overall_fan++;\n                }\n\n                if (last_value.main_floor == HEAT) {\n                    runtimes.main_floor.heat += elapsed_time;\n                    overall_heat++;\n                }\n                else if (last_value.main_floor == COOL) {\n                    runtimes.main_floor.cool += elapsed_time;\n                    overall_cool++;\n                }\n                else if (last_value.main_floor == FAN) {\n                    runtimes.main_floor.fan += elapsed_time;\n                    overall_fan++;\n                }            \n                \n                if (last_value.basement == HEAT) {\n                    runtimes.basement.heat += elapsed_time;\n                    overall_heat++;\n                }\n                else if (last_value.basement == COOL) {\n                    runtimes.basement.cool += elapsed_time;\n                    overall_cool++;\n                }\n                else if (last_value.basement == FAN) {\n                    runtimes.basement.fan += elapsed_time;\n                    overall_fan++;\n                }                  \n\n                // if some run mode is set, we ran for the\n                // elapsed time in that mode.\n\n                // these are ordered this way because heat and\n                // cool are mutually exclusive, while fan is\n                // not. However, we don't count the fan runtime\n                // if something else is set - it's effectively\n                // \"dedicated fan\".\n                if (overall_heat > 0) {\n                    runtimes.overall.heat += elapsed_time;\n                }\n                else if (overall_cool > 0) {\n                    runtimes.overall.cool += elapsed_time;\n                }\n                else if (overall_fan > 0) {\n                    runtimes.overall.fan += elapsed_time;\n                }\n                \n            }\n            // else just set the last key\n            last_key = key;\n            \n        }\n    }\n);\n\n// prep and send our graph\nvar graph = [{\n    \"series\": [ \"Heat\", \"Cool\", \"Fan\"],\n    \"data\": [\n              [ millisecondsToHours(runtimes.upstairs.heat),\n                millisecondsToHours(runtimes.main_floor.heat),\n                millisecondsToHours(runtimes.basement.heat),\n                millisecondsToHours(runtimes.overall.heat), ],\n              [ millisecondsToHours(runtimes.upstairs.cool),\n                millisecondsToHours(runtimes.main_floor.cool),\n                millisecondsToHours(runtimes.basement.cool),\n                millisecondsToHours(runtimes.overall.cool),],\n              [ millisecondsToHours(runtimes.upstairs.fan),\n                millisecondsToHours(runtimes.main_floor.fan),\n                millisecondsToHours(runtimes.basement.fan),\n                millisecondsToHours(runtimes.overall.fan), ],\n            ],\n    \"labels\": [ \"Upstairs\", \"Main Floor\", \"Basement\", \"Overall\"]\n    }];\nvar data = {};\ndata.topic = \"data\";\ndata.timestamp = now;\ndata.payload = graph;\n\nreturn data;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":480,"y":2980,"wires":[["d25c3cff6b4ce514","c383aba966f59c4f"]]},{"id":"f80432d4d554e262","type":"inject","z":"c956f6e4.937a7","g":"d34ef8a2ae06d8e5","name":"Statistics display trigger","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"3600","crontab":"","once":true,"onceDelay":"1","topic":"","payload":"","payloadType":"date","x":170,"y":2980,"wires":[["48cd9e2e50b3b0f8"]]},{"id":"d25c3cff6b4ce514","type":"debug","z":"c956f6e4.937a7","g":"d34ef8a2ae06d8e5","name":"Debug stats","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":770,"y":2960,"wires":[]},{"id":"c383aba966f59c4f","type":"ui_chart","z":"c956f6e4.937a7","g":"d34ef8a2ae06d8e5","name":"Runtimes","group":"408c1eba.a9c6a8","order":1,"width":0,"height":0,"label":"Rolling 30 day cumulative","chartType":"bar","legend":"true","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","dot":false,"ymin":"","ymax":"","removeOlder":1,"removeOlderPoints":"","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#cc0000","#729fcf","#ffffff","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"className":"","x":760,"y":3000,"wires":[[]]},{"id":"0d3dbb7b47322fc0","type":"change","z":"c956f6e4.937a7","g":"1fa2872e.1bad99","name":"Name changer","rules":[{"t":"change","p":"topic","pt":"msg","from":"adventure-bay","fromt":"str","to":"avengers-campus","tot":"str"},{"t":"change","p":"topic","pt":"msg","from":"boys-room","fromt":"str","to":"miles-room","tot":"str"},{"t":"change","p":"topic","pt":"msg","from":"guest-room","fromt":"str","to":"max-room","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":960,"y":240,"wires":[["621ca232.da3ffc"]]},{"id":"a4afde8d79d0a552","type":"e-mail","z":"c956f6e4.937a7","g":"6f07d525.5ab154","server":"mail.domain.net","port":"25","secure":false,"tls":false,"name":"email@domain.net","dname":"Data collection warning email","x":560,"y":700,"wires":[]},{"id":"50c741b691c09e3c","type":"ui_switch","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"","label":"Enable all fan mode","tooltip":"Disables temperature checking and turns on the fan","group":"a7684798.a5ef","order":1,"width":0,"height":0,"passthru":true,"decouple":"false","topic":"enabled","topicType":"str","style":"","onvalue":"true","onvalueType":"bool","onicon":"","oncolor":"","offvalue":"false","offvalueType":"bool","officon":"","offcolor":"","animate":false,"className":"","x":160,"y":2220,"wires":[["79d40c87e6abe7a8"]]},{"id":"79d40c87e6abe7a8","type":"function","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","name":"All fan mode state storage","func":"var all_fan_mode = global.get(\"all_fan_mode\");\n\n// parse and store message\nif (msg.topic == \"enabled\") {\n    all_fan_mode.enabled = msg.payload;    \n}\nglobal.set(\"all_fan_mode\", all_fan_mode);\n\n// set UI text\nif (all_fan_mode.enabled) {\n    msg.payload = \"The temperature will be ignored and the fan will run until disabled. (This resets at midnight.)\";\n}\nelse {\n    msg.payload = \"The fan will be automatically controlled.\";\n}\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":410,"y":2220,"wires":[["a514f3570ea7aeac","a30c441d.604788"]]},{"id":"a514f3570ea7aeac","type":"ui_text","z":"c956f6e4.937a7","g":"e0c033c.0d2b4d","group":"a7684798.a5ef","order":2,"width":6,"height":2,"name":"All fan mode text","label":"","format":"{{msg.payload}}","layout":"col-center","className":"","x":650,"y":2220,"wires":[]},{"id":"6701ed7d012f9563","type":"e-mail","z":"c956f6e4.937a7","g":"4cf002bb.ebebb4","server":"mail.domain.net","port":"25","secure":false,"tls":false,"name":"email@domain.net","dname":"I've booted email","x":710,"y":140,"wires":[]},{"id":"8959b7ef1de4fba1","type":"function","z":"c956f6e4.937a7","g":"4cf002bb.ebebb4","name":"Initial boot email","func":"msg.topic = \"INFO - The thermostat rebooted.\";\nmsg.payload = \"Hello,\\n\\n\" +\n              \"The thermostat has rebooted.\\n\" +\n              \"I thought you might like to know.\";\nnode.send(msg);","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":600,"y":60,"wires":[["6701ed7d012f9563"]]}]
